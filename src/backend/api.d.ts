/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/workspaces/{workspace_id}/projects/{project_id}/entity_ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all entity IDs in a Project
         * @description Returns entity IDs in a given Project
         */
        get: operations["entity-id-list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/triggers/{trigger_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return a trigger
         * @description Returns details of a single trigger
         */
        get: operations["trigger-get"];
        put?: never;
        post?: never;
        /**
         * Delete a trigger
         * @description Deletes a trigger
         */
        delete: operations["trigger-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/tool_integrations/toggle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Toggles enabled/disabled state of tool integration
         * @description Toggles enabled/disabled state of a given tool integration in the workspace.
         *     Disabled integrations render tools using them inoperable in the workspace.
         *
         */
        post: operations["tools-toggle-integration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List all entities in a Project
         * @description Returns details of entities in a given Project, allows for filtering
         */
        post: operations["filtered-entity-list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}/properties/{property_id_or_slug}/start_file_upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retrieve a url to upload a file to a field
         * @description Start the file upload process for a given entity property.
         *     Use the retrieved `file_upload_url` to upload the file to the storage.
         *     After file is uploaded use returned `confirm_upload_url` to confirm the upload.
         *     Be sure to use provided confirm URL as this request may redirect you to different
         *     Sub-Project as result of upload initiation.
         *
         */
        post: operations["entity-start-file-upload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/views": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List project views
         * @description List all views for a given project
         */
        get: operations["project-list-views"];
        put?: never;
        /**
         * Creates a new project view
         * @description Creates a new view for a project
         */
        post: operations["project-add-view"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/tool_integrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns current state of tool integration along with available tools.
         * @description Returns current state of a given tool integration in the workspace along with
         *     all available tools. If integration is disabled, tools using it will be inoperable but
         *     still listed under that integration.
         *
         */
        get: operations["tools-list-integrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}/properties/{property_id_or_slug}/set_value": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Sets a field value
         * @deprecated
         * @description Sets a value of a field
         */
        put: operations["entity-set-value"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/billing/plans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List plans for current workspace
         * @description Returns details of all plans in a given Workspace.
         *     There are 3 types of plans shown:
         *     - Effective plan - the plan that is currently active for the workspace
         *     - Incomplete plans - plans that are not active at this moment, for example started upgrades or permanent "free" plan
         *     - Available plans - all plans that are available for the workspace to upgrade to
         *
         *     Usage information within plans is only returned by the "effective" plan and only
         *     for limits that are scoped to the workspace (not project).
         *
         */
        get: operations["billing-plan-list"];
        put?: never;
        /**
         * Starts process of plan upgrade
         * @description By providing details of any available plan (received from `GET /api/workspaces/:workspace_id/billing/plans`),
         *     you can start the process of upgrading the plan for the workspace.
         *     This API returns the details of the new plan and the URL to continue the upgrade process.
         *
         */
        post: operations["billing-plan-upgrade"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}/properties/{property_id_or_slug}/confirm_file_upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirm the file has been uploaded to a field
         * @description Finish the file upload process for a given entity property
         */
        post: operations["entity-confirm-file-upload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/properties": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List properties in a project
         * @description Lists properties in a project.
         */
        get: operations["project-list-properties"];
        put?: never;
        /**
         * Add a property to a project
         * @description Adds a property to a project
         */
        post: operations["project-add-property"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/views/{view_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a project view
         * @description Get a given project's view
         */
        get: operations["project-get-view"];
        /**
         * Update a project view
         * @description Update a given project's view
         */
        put: operations["project-update-view"];
        post?: never;
        /**
         * Delete a project view
         * @description Delete a given project's view
         */
        delete: operations["project-delete-view"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/api_keys/{api_key_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return an api key
         * @description Returns details of a single api key
         */
        get: operations["api-key-get"];
        put?: never;
        post?: never;
        /**
         * Delete an api key
         * @description Deletes an api key
         */
        delete: operations["api-key-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/library/entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all entities in a Library
         * @description Returns details of entities in a given Library project.
         */
        get: operations["library-entity-list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/icon": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update a workspace icon
         * @description Updates a workspace icon to one uploaded with this API.
         */
        post: operations["workspace-update-icon"];
        /**
         * Removes a workspace icon
         * @description Removes a workspace icon; the workspace icon URL will return 404.
         */
        delete: operations["workspace-remove-icon"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/api_keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List api keys for a user
         * @description Returns details of all api keys for the current user. Supports pagination using limit/offset or cursors. Maximum page size is 1000.
         */
        get: operations["api-keys-list"];
        put?: never;
        /**
         * Create an api key
         * @description Creates a new api key
         */
        post: operations["api-key-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/exports/{export_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return an Export
         * @description Returns details of a single export
         */
        get: operations["export-get"];
        put?: never;
        post?: never;
        /**
         * Delete an export
         * @description Deletes an export
         */
        delete: operations["export-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}/previous": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the previous entity
         * @description Gets the previous entity in a project
         */
        get: operations["get-previous-entity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/properties/{property_id_or_slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a property
         * @description Returns details of a project's property
         */
        get: operations["project-get-property"];
        /**
         * Update a property in a project
         * @description Updates a property in a project
         */
        put: operations["project-update-property"];
        post?: never;
        /**
         * Remove a property from a project
         * @description Removes a property from a project
         */
        delete: operations["project-remove-property"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/ask_go/{session_id}/start_file_upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Starts a file upload
         * @description Starts a file upload
         */
        post: operations["ask-go-start-file-upload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return a user
         * @description Returns details of a single user
         */
        get: operations["user-get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List workspaces
         * @description Returns details of all workspaces the user has access to
         */
        get: operations["workspace-list"];
        put?: never;
        /**
         * Create a workspace
         * @description Creates a new workspace
         */
        post: operations["workspace-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/ask_go/{session_id}/ask": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ask a question
         * @description Ask a question
         */
        post: operations["ask-go-ask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/ask_go": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List sessions
         * @description List sessions
         */
        get: operations["ask-go-list-sessions"];
        put?: never;
        /**
         * Creates a new session
         * @description Creates a new session
         */
        post: operations["ask-go-create-session"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}/next": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the next entity
         * @description Gets the next entity in a project
         */
        get: operations["get-next-entity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/imports/{import_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Starts an Import
         * @description Starts a new import that already has import file uploaded.
         *
         */
        post: operations["import-start"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/invitations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List invitations in a Workspace
         * @description Returns details of all invitations in a given Workspace. Supports pagination using limit/offset or cursors. Maximum page size is 1000.
         *
         */
        get: operations["workspace-invitation-list"];
        put?: never;
        /**
         * Create new invitation into a Workspace
         * @description Creates a new invitation into a Workspace. The invitation will be sent to the email address provided.
         *     If the invitation is already penfing or expired for this email/workspace combo,
         *     if will be updated with the new role and resend.
         *
         */
        post: operations["workspace-invitation-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/cover_image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update a project's cover image
         * @description Updates a project's cover image to one uploaded with this API.
         */
        post: operations["project-update-cover-image"];
        /**
         * Removes a project's cover image
         * @description Removes a project's cover image; the cover image URLs will return 404.
         */
        delete: operations["project-remove-cover-image"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return a user
         * @description Returns details of a logged in user
         */
        get: operations["user-get-me"];
        /**
         * Update a user
         * @description Updates information of the currently logged in user
         */
        put: operations["user-update-me"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/imports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List imports in a project
         * @description Returns details of all imports in a given project. Supports pagination using limit/offset or cursors. Maximum page size is 1000.
         */
        get: operations["import-list-project"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/ask_go/create_project_from_prompt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates a project from a user specified prompt
         * @description From a user specific prompt a project is created
         */
        post: operations["ask-go-create-project-from-prompt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/imports/{import_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return an Import
         * @description Returns details of a single import
         */
        get: operations["import-get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/bulk_delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bulk delete entities
         * @description Delete given list of entity IDs for given project ID
         */
        post: operations["entity-bulk-delete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/recalculate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Recalculate all entities
         * @description Recalculate all entity fields for provided properties
         */
        post: operations["entity-recalculate-all"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/invitations/{invitation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete an pending invitation from a Workspace
         * @description Deletes an pending invitation from a Workspace.
         */
        delete: operations["workspace-invitation-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/invitations/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accept an invitation
         * @description Accepts the invitation, adding user to the workspace
         */
        post: operations["workspace-invitation-accept"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/triggers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List triggers in a workspace
         * @description Returns details of all trigger in a given Workspace. Supports pagination using limit/offset or cursors. Maximum page size is 1000.
         */
        get: operations["trigger-list"];
        put?: never;
        /**
         * Create a trigger
         * @description Creates a new trigger
         */
        post: operations["trigger-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return a workspace
         * @description Returns details of a single workspace
         */
        get: operations["workspace-get"];
        /**
         * Update a workspace
         * @description Updates a workspace
         */
        put: operations["workspace-update"];
        post?: never;
        /**
         * Delete a workspace
         * @description Deletes a workspace
         */
        delete: operations["workspace-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}/recalculate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Recalculate entity fields
         * @description Recalculate entity's fields for provided properties
         */
        post: operations["entity-recalculate-single"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/library/entities/{entity_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Library's entity attributes
         * @description Updates attributes of a Library item.
         */
        put: operations["library-update-entity-attributes"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/members/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a member of a Workspace
         * @description Returns details of a single user in a given Workspace.
         */
        get: operations["workspace-member-get"];
        /**
         * Update a user's role in a workspace
         * @description Updates a user's role in a workspace
         */
        put: operations["user-workspace-member-update"];
        post?: never;
        /**
         * Delete a user's role in a workspace
         * @description Deletes a user's role in a workspace
         */
        delete: operations["user-workspace-member-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List projects in a Workspace
         * @description Returns details of all projects in a given Workspace. Supports pagination using limit/offset or cursors. Maximum page size is 1000.
         */
        get: operations["project-list"];
        put?: never;
        /**
         * Create a project
         * @description Creates a new project
         */
        post: operations["project-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/tool_keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List custom API keys set for a workspace
         * @description Returns details of all custom API keys set for a given workspace. No secrets are
         *     returned in the response.
         *
         */
        get: operations["tools-list-keys"];
        put?: never;
        /**
         * Upserts custom API key for tool integration
         * @description Upserts custom API key for a given tool integration. Attached key
         *     will be used by all models using that integration in the workspace.
         *     If key already exists for this integration, it will be updated.
         *     Only single API key can be set for each integration in the workspace.
         *
         */
        post: operations["tools-upsert-key"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/clone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Clone a project
         * @description Clones a project
         */
        post: operations["project-clone"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/imports/{import_id}/sign_upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get upload URL
         * @description Returns a signed URL for uploading the import file.
         *
         */
        post: operations["import-sign-upload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/entity_ids/filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List all entity IDs in a Project (filtered)
         * @description Returns entity IDs in a given Project
         */
        post: operations["filtered-entity-id-list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/ask_go/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a session
         * @description Get a session
         */
        get: operations["ask-go-get-session"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/library": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Library project for a workspace
         * @description Returns a workspace-wide Library project. This project always exists
         */
        get: operations["library-get-workspace"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List members in a Workspace
         * @description Returns details of all members in a given Workspace.
         */
        get: operations["user-workspace-members-list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an entity
         * @description Returns details of an entity
         */
        get: operations["entity-get"];
        /**
         * Sets field values on an entity
         * @description Updates the values of one or more fields for an entity.
         *     The request body should contain a map of property ids or slugs to values.
         *
         */
        put: operations["entity-update-values"];
        post?: never;
        /**
         * Delete an entity
         * @description Deletes an entity
         */
        delete: operations["entity-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a project
         * @description Returns details of a project
         */
        get: operations["project-get"];
        /**
         * Update a project
         * @description Updates a project
         */
        put: operations["project-update"];
        post?: never;
        /**
         * Delete a project
         * @description Deletes a project
         */
        delete: operations["project-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities/{entity_id}/properties/{property_id_or_slug}/ground_truth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Sets the Ground Truth status of a field.
         * @description Sets the Ground Truth status of a field. When set to true the field will be immutable and can be used in benchmark and optimizations.
         */
        put: operations["entity-set-ground-truth"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all entities in a Project
         * @description Returns details of entities in a given Project
         */
        get: operations["entity-list"];
        put?: never;
        /**
         * Create an entity
         * @description Creates a new entity
         */
        post: operations["entity-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/imports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List imports in a workspace
         * @description Returns details of all imports in a given workspace. Supports pagination using limit/offset or cursors. Maximum page size is 1000.
         */
        get: operations["import-list-workspace"];
        put?: never;
        /**
         * Prepares an Import
         * @description Prepares a new import. Upload of the import file should be done after this step.
         *
         */
        post: operations["import-prepare"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/projects/{project_id}/exports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List exports in a project
         * @description Returns details of all exports in a given project. Supports pagination using limit/offset or cursors. Maximum page size is 1000.
         */
        get: operations["export-list"];
        put?: never;
        /**
         * Create an Export
         * @description Creates a new export
         */
        post: operations["export-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{workspace_id}/tool_keys/{tool_key_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Removes existing custom API key for tool integration
         * @description Removes existing custom API key for a given tool integration. Default system
         *     key will be used by all models using that integration in the workspace.
         *
         */
        delete: operations["tools-delete-key"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project_templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List public template projects
         * @description Returns details of all projects publicly available for cloning. Supports pagination using limit/offset or cursors. Maximum page size is 1000.
         */
        get: operations["project-template-list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AskGo.CreateSessionRequest
         * @description Create session request
         */
        "AskGo.CreateSessionRequest": {
            ask?: string;
            project_id: string;
        };
        /**
         * Automations.CreateTriggerRequest
         * @description Create trigger request
         */
        "Automations.CreateTriggerRequest": {
            action?: components["schemas"]["Automations.Action"];
            events: components["schemas"]["Automations.EventsRequest"];
            project_id: components["schemas"]["Common.NullableUUID"];
        };
        /**
         * Projects.ListEntities.FieldFileResponse
         * @description Response for a file value
         */
        "Projects.ListEntities.FieldFileResponse": {
            original_filename: string | null;
            updated_by: (components["schemas"]["Common.UUID"] | components["schemas"]["Projects.Common.PropertyTool"]) | null;
            value: string | null;
        };
        /**
         * Projects.SelectMaxSelected
         * @description Maximum number of options that can be selected on any field.
         *     0 for unlimited.
         *
         */
        "Projects.SelectMaxSelected": number | null;
        /**
         * Projects.UpdateProjectCoverImageRequest
         * @description Upload of project cover image
         */
        "Projects.UpdateProjectCoverImageRequest": {
            /** Format: binary */
            file: string;
        };
        /**
         * Pagination.Last
         * @description The number of records to return for before the provided cursor; used in combination with `before`
         * @example 50
         */
        "Pagination.Last": number | null;
        /**
         * Projects.PDFPropertyConfigResponse
         * @description PDF property configuration
         */
        "Projects.PDFPropertyConfigResponse": {
            /** @enum {string} */
            splitter: "none" | "page_split";
            subproject_config: components["schemas"]["Projects.SubProjectPropertyConfigResponse"];
        };
        /**
         * Imports.PrepareImportRequestNewProject
         * @description Prepare import request
         */
        "Imports.PrepareImportRequestNewProject": {
            format: components["schemas"]["Imports.Format"];
            format_options: components["schemas"]["Imports.FormatOptions"];
            project_name: string;
            settings?: components["schemas"]["Imports.Settings"];
        };
        /**
         * TYPED_URL
         * @description Update a field value request
         */
        TYPED_URL: {
            /** Format: uri */
            url: string | null;
        };
        /**
         * EntityFilters.EntityId
         * @description Filter entities based on entity id
         */
        "EntityFilters.EntityId": {
            matcher: {
                /** @enum {string} */
                name: "any_of";
                values: components["schemas"]["Common.UUID"][];
            } | {
                /** @enum {string} */
                name: "none_of";
                values: components["schemas"]["Common.UUID"][];
            };
            /** @enum {string} */
            subject: "id";
        };
        /**
         * Projects.ListEntities.EntityResponse
         * @description An entity
         */
        "Projects.ListEntities.EntityResponse": {
            active_view_ids?: components["schemas"]["Common.UUID"][];
            fields: {
                [key: string]: components["schemas"]["Projects.ListEntities.FieldResponse"] | undefined;
            };
            id: components["schemas"]["Common.UUID"];
            parent_entity_id?: components["schemas"]["Common.NullableUUID"];
            project_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Projects.AddPropertyRequest
         * @description Add property request
         */
        "Projects.AddPropertyRequest": components["schemas"]["Projects.AddBasicPropertyRequest"] | components["schemas"]["Projects.AddPDFPropertyRequest"] | components["schemas"]["Projects.AddSingleSelectPropertyRequest"] | components["schemas"]["Projects.AddMultiSelectPropertyRequest"] | components["schemas"]["Projects.AddUserSelectPropertyRequest"] | components["schemas"]["Projects.AddTablePropertyRequest"];
        /**
         * Pagination.OrderDirections
         * @description List of order directions for the fields in `order_by`
         * @example [
         *       "desc",
         *       "asc"
         *     ]
         */
        "Pagination.OrderDirections": ("asc" | "desc")[] | null;
        /**
         * Library.EntityResponseInList
         * @description An entity
         */
        "Library.EntityResponseInList": {
            active_view_ids?: components["schemas"]["Common.UUID"][];
            fields: {
                [key: string]: components["schemas"]["Projects.ListEntities.FieldResponse"] | undefined;
            };
            id: components["schemas"]["Common.UUID"];
            library_attributes: components["schemas"]["Library.LibraryAttributesResponse"];
            parent_entity_id?: components["schemas"]["Common.NullableUUID"];
            project_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Billing.PlanProvider
         * @description Provider of the plan
         * @enum {string}
         */
        "Billing.PlanProvider": "stripe" | "local";
        /** Number */
        Number: number;
        /**
         * Projects.CreateProjectRequest
         * @description Create project request
         */
        "Projects.CreateProjectRequest": {
            name: string | null;
        };
        /**
         * ApiKeys.ListApiKeysResponse
         * @description List api keys response
         */
        "ApiKeys.ListApiKeysResponse": {
            data: components["schemas"]["ApiKeys.ApiKeyResponse"][];
            metadata: components["schemas"]["Pagination.PageMetadata"];
        };
        /** Imports.FormatOptions */
        "Imports.FormatOptions": components["schemas"]["Imports.FormatOptionsCSV"];
        /**
         * WorkspaceInvitations.AcceptInvitationRequest
         * @description A request to accept workspece invitation
         */
        "WorkspaceInvitations.AcceptInvitationRequest": {
            invite_token: string;
        };
        /** Tools.Integrations.MaxInputCount */
        "Tools.Integrations.MaxInputCount": number | "unlimited";
        /**
         * Projects.SingleSelectPropertyConfigResponse
         * @description Select property configuration
         */
        "Projects.SingleSelectPropertyConfigResponse": {
            default_option?: components["schemas"]["Projects.SelectDefaultOption"];
            options: components["schemas"]["Projects.SelectOptionResponse"][];
        };
        /**
         * TYPED_JSON
         * @description Update a field value request
         */
        TYPED_JSON: {
            json: string | null;
        };
        /**
         * Projects.MultiSelectPropertyConfigResponse
         * @description Select property configuration
         */
        "Projects.MultiSelectPropertyConfigResponse": {
            default_option?: components["schemas"]["Projects.SelectDefaultOption"];
            max_selected: components["schemas"]["Projects.SelectMaxSelected"];
            options: components["schemas"]["Projects.SelectOptionResponse"][];
        };
        /**
         * Imports.ImportResponse
         * @description An import object.
         *
         *     `project_id` may be `null` if the import is not associated with a project yet (import into new project).
         *
         */
        "Imports.ImportResponse": {
            created_at: components["schemas"]["Common.DateTime"];
            error_details?: components["schemas"]["Imports.ErrorDetails"];
            format: components["schemas"]["Imports.Format"];
            format_options: components["schemas"]["Imports.FormatOptions"];
            id: components["schemas"]["Common.UUID"];
            processed_entities?: number | null;
            project_id?: components["schemas"]["Common.NullableUUID"];
            project_name: string | null;
            settings: components["schemas"]["Imports.Settings"];
            /** @enum {string} */
            status: "complete" | "error" | "processing" | "queued" | "pending";
            updated_at: components["schemas"]["Common.DateTime"];
            workspace_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Billing.LimitAggregation
         * @enum {string}
         */
        "Billing.LimitAggregation": "total" | "billing_period";
        /**
         * AskGo.AskRequest
         * @description Ask request
         */
        "AskGo.AskRequest": {
            ask: string;
            /** @default [] */
            upload_entity_ids: components["schemas"]["Common.UUID"][];
        };
        /**
         * Users.UserMeUpdateRequest
         * @description Update information of the currently logged in user
         */
        "Users.UserMeUpdateRequest": {
            accepted_terms_and_conditions?: boolean;
            first_name?: string;
            last_name?: string;
            marketing_optin?: boolean;
            show_tutorials?: boolean;
            signup_completed?: boolean;
        };
        /**
         * Users.UserResponse
         * @description A user
         */
        "Users.UserResponse": {
            email?: string;
            first_name?: string;
            id: components["schemas"]["Common.UUID"];
            last_name?: string;
        };
        /**
         * Projects.UpdateSingleSelectPropertyConfig
         * @description Select property configuration.
         *     You can send any combination of the available configuration options.
         *
         */
        "Projects.UpdateSingleSelectPropertyConfig": {
            default_option?: components["schemas"]["Projects.SelectDefaultOption"];
            max_selected?: components["schemas"]["Projects.SelectMaxSelected"];
            /**
             * @description Remove select options.
             *     If the value doesn't exist, it will be ignored.
             *
             * @default []
             */
            remove_options: string[];
            /**
             * @description Add or update select options.
             *     If the value already exists, it will be updated either with new color, or new value text.
             *     Values that don't already exist will be added.
             *     You can have at most 1000 options at any time.
             *
             * @default []
             */
            upsert_options: {
                color?: components["schemas"]["Projects.SelectOptionColor"];
                new_value?: string | null;
                value: string;
            }[];
        };
        /**
         * EntityFilters.SelectOptionValue
         * @description Filter entities based on select option value
         */
        "EntityFilters.SelectOptionValue": {
            matcher: {
                /** @enum {string} */
                name: "property_any_of";
                property_id: components["schemas"]["Common.UUID"];
                values: string[];
            } | {
                /** @enum {string} */
                name: "property_all_of";
                property_id: components["schemas"]["Common.UUID"];
                values: string[];
            } | {
                /** @enum {string} */
                name: "property_none_of";
                property_id: components["schemas"]["Common.UUID"];
                values: string[];
            };
            /** @enum {string} */
            subject: "select_option_value";
        };
        /**
         * Projects.SubProjectPropertyConfigResponse
         * @description Sub-project property configuration
         */
        "Projects.SubProjectPropertyConfigResponse": {
            child_project_id: components["schemas"]["Common.UUID"];
            primary_property_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Projects.ProjectResponseInList
         * @description A project
         */
        "Projects.ProjectResponseInList": {
            cover_image_urls: components["schemas"]["Projects.ProjectCoverImageURLs"];
            id: components["schemas"]["Common.UUID"];
            name: string | null;
            parent_property: components["schemas"]["Projects.PropertyResponse"] | null;
            properties: components["schemas"]["Projects.PropertyResponse"][];
            workspace_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Projects.PropertyInputResponse
         * @description A property input
         */
        "Projects.PropertyInputResponse": {
            entity_id?: components["schemas"]["Common.NullableUUID"];
            property_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Common.URL
         * @example https://example.com
         */
        "Common.URL": string;
        /**
         * Projects.OnlyParentProjects
         * @description Only return parent projects
         * @default false
         */
        "Projects.OnlyParentProjects": boolean;
        /**
         * ApiKeys.CreateApiKeyRequest
         * @description Create api key request
         */
        "ApiKeys.CreateApiKeyRequest": {
            days_valid: number | null;
            name: string | null;
        };
        /**
         * Projects.UpdateCollectionPropertyRequest
         * @description Update specified fields of a Property
         */
        "Projects.UpdateCollectionPropertyRequest": {
            config?: components["schemas"]["Projects.UpdateCollectionPropertyConfig"];
            description: string | null;
            /** @deprecated */
            input_ids?: components["schemas"]["Common.UUID"][] | null;
            inputs?: components["schemas"]["Projects.PropertyInput"][] | null;
            name: string;
            tool: components["schemas"]["Projects.Common.PropertyTool"];
            /** @enum {string} */
            type: "collection";
        };
        /** Projects.PropertyLayoutId */
        "Projects.PropertyLayoutId": {
            height: components["schemas"]["Common.NonNegativeInteger"];
            property_id: components["schemas"]["Common.UUID"];
            width: components["schemas"]["Common.NonNegativeInteger"];
            x: components["schemas"]["Common.Integer"];
            y: components["schemas"]["Common.Integer"];
        };
        /**
         * Projects.ListEntities.FieldResponse
         * @description A field
         */
        "Projects.ListEntities.FieldResponse": {
            created_at: components["schemas"]["Common.DateTime"];
            entity_id: components["schemas"]["Common.UUID"];
            error_message: string | null;
            ground_truth: boolean;
            manual_value: components["schemas"]["Projects.ListEntities.FieldValueResponse"];
            property_hash: string | null;
            property_id: components["schemas"]["Common.UUID"];
            property_type: components["schemas"]["Projects.Common.PropertyType"];
            status: components["schemas"]["Projects.ListEntities.FieldStatus"];
            tool_error_message?: string | null;
            tool_metadata?: components["schemas"]["Projects.ListEntities.FieldMetadataResponse"];
            tool_status?: components["schemas"]["Projects.ListEntities.FieldStatus"];
            tool_value: components["schemas"]["Projects.ListEntities.FieldValueResponse"];
            updated_at: components["schemas"]["Common.DateTime"];
        };
        /**
         * Library.ListEntitiesOrderBy
         * @description List of field names to order by
         * @example [
         *       "id"
         *     ]
         */
        "Library.ListEntitiesOrderBy": "id"[] | null;
        /**
         * ApiKeys.ApiKeyResponse
         * @description An api key
         */
        "ApiKeys.ApiKeyResponse": {
            expires_at: components["schemas"]["Common.NullableDateTime"];
            id: components["schemas"]["Common.UUID"];
            key: string | null;
            last_used_at: components["schemas"]["Common.NullableDateTime"];
            name: string | null;
            prefix: string;
            user_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Exports.ExportResponse
         * @description An export
         */
        "Exports.ExportResponse": {
            id: components["schemas"]["Common.UUID"];
            inserted_at: components["schemas"]["Common.DateTime"];
            name: string;
            project_id: components["schemas"]["Common.UUID"];
            /** @enum {string} */
            status: "pending" | "complete" | "error";
            updated_at: components["schemas"]["Common.DateTime"];
            url: string | null;
        };
        /**
         * EntityFilters.GroupFilter
         * @description Groups `simple` or `group filters` together with `or`, `and` operators. You have to specify at least one `filter`.
         */
        "EntityFilters.GroupFilter": {
            conjunction: components["schemas"]["EntityFilters.Conjunction"];
            /** @description List of `simple` or `group` filters */
            filters: components["schemas"]["EntityFilters.Filter"][];
        };
        /**
         * Workspaces.UpdateWorkspaceRequest
         * @description Update workspace request.
         *     When metadata is provided, it will overwrite the existing metadata in its entirety.
         *
         */
        "Workspaces.UpdateWorkspaceRequest": {
            metadata?: components["schemas"]["Workspaces.WorkspaceMetadata"];
            name?: string;
        };
        /**
         * Pagination.TotalCount
         * @description The total count of records for the given query. Always `null` when using cursor-based  pagination.
         * @example 50
         */
        "Pagination.TotalCount": number | null;
        /**
         * Projects.SetFieldValueFromTextRequest
         * @description Set a field value request
         */
        "Projects.SetFieldValueFromTextRequest": {
            value: string | null;
        };
        /**
         * field_value
         * @description Set a fields value
         */
        field_value: components["schemas"]["TYPED_SELECT"] | components["schemas"]["TYPED_TEXT"] | components["schemas"]["TYPED_JSON"] | components["schemas"]["TYPED_URL"] | components["schemas"]["TYPED_FILE_URL"] | (string | null) | number | string[];
        /**
         * Billing.UnlimitedValue
         * @enum {string}
         */
        "Billing.UnlimitedValue": "unlimited";
        /** Common.DeleteResponse */
        "Common.DeleteResponse": {
            id: components["schemas"]["Common.UUID"];
        };
        /**
         * Users.UpdateMemberRequest
         * @description Updates a user's role in on given resource
         */
        "Users.UpdateMemberRequest": {
            /** @enum {string} */
            role?: "admin" | "worker";
        };
        /**
         * Common.Email
         * Format: email
         * @example email@example.com
         */
        "Common.Email": string;
        /**
         * Projects.PropertyResponse
         * @description A property
         */
        "Projects.PropertyResponse": {
            config?: components["schemas"]["Projects.PropertyConfigResponse"];
            description: string | null;
            hash: string;
            id: components["schemas"]["Common.UUID"];
            /** @deprecated */
            input_ids: components["schemas"]["Common.UUID"][];
            inputs: components["schemas"]["Projects.PropertyInputResponse"][];
            name: string;
            /** @enum {string} */
            owner: "user" | "system";
            parent_project_id?: components["schemas"]["Common.NullableUUID"];
            parent_property_id?: components["schemas"]["Common.NullableUUID"];
            slug: string;
            tool: components["schemas"]["Projects.Common.PropertyTool"];
            type: components["schemas"]["Projects.Common.PropertyType"];
        };
        /**
         * Automations.ListTriggersResponse
         * @description List triggers response
         */
        "Automations.ListTriggersResponse": {
            data: components["schemas"]["Automations.TriggerResponse"][];
            metadata: components["schemas"]["Pagination.PageMetadata"];
        };
        /**
         * Projects.UpdateProjectRequest
         * @description Updates specified fields of a project
         */
        "Projects.UpdateProjectRequest": {
            name: string | null;
        };
        /**
         * Projects.PropertyInput
         * @description A property input. If entity_id is null, the input will always be from current entity.
         *
         */
        "Projects.PropertyInput": {
            entity_id?: components["schemas"]["Common.NullableUUID"];
            property_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Library.ListEntitiesResponse
         * @description List library's entities response
         */
        "Library.ListEntitiesResponse": {
            data: components["schemas"]["Library.EntityResponseInList"][];
            metadata: components["schemas"]["Pagination.PageMetadata"];
        };
        /**
         * Common.MimeType
         * @example image/png
         * @enum {string}
         */
        "Common.MimeType": "application/json" | "application/pdf" | "audio/mp4" | "audio/mpeg" | "audio/ogg" | "audio/wav" | "audio/x-flac" | "image/bmp" | "image/gif" | "image/jpeg" | "image/png" | "image/tiff" | "image/webp" | "text/csv" | "text/html" | "text/markdown" | "text/plain" | "video/mp4" | "video/mpeg" | "video/webm";
        /**
         * WorkspaceInvitations.Role
         * @enum {string}
         */
        "WorkspaceInvitations.Role": "admin" | "worker";
        /**
         * Tools.Integrations.IntegrationName
         * @enum {string}
         */
        "Tools.Integrations.IntegrationName": "open_ai" | "google_ai" | "azure_open_ai" | "anthropic" | "mistral" | "bing_search" | "azure_ocr" | "internal" | "fire_crawl" | "amazon_textract";
        /**
         * Projects.UpdateMultiSelectPropertyConfig
         * @description Select property configuration.
         *     You can send any combination of the available configuration options.
         *
         */
        "Projects.UpdateMultiSelectPropertyConfig": {
            default_option?: components["schemas"]["Projects.SelectDefaultOption"];
            max_selected?: components["schemas"]["Projects.SelectMaxSelected"];
            /**
             * @description Remove select options.
             *     If the value doesn't exist, it will be ignored.
             *
             * @default []
             */
            remove_options: string[];
            /**
             * @description Add or update select options.
             *     If the value already exists, it will be updated either with new color, or new value text.
             *     Values that don't already exist will be added.
             *     You can have at most 1000 options at any time.
             *
             * @default []
             */
            upsert_options: {
                color?: components["schemas"]["Projects.SelectOptionColor"];
                new_value?: string | null;
                value: string;
            }[];
        };
        /**
         * AskGo.CreateProjectFromPromptRequest
         * @description Create project from prompt request
         */
        "AskGo.CreateProjectFromPromptRequest": {
            prompt: string;
        };
        /**
         * Pagination.PageMetadata
         * @description Metadata returns for paginated requests. The values set depend on the type of pagination used
         */
        "Pagination.PageMetadata": {
            current_offset: components["schemas"]["Pagination.Offset"];
            end_cursor: components["schemas"]["Pagination.Cursor"];
            /** @example true */
            has_next_page: boolean;
            /** @example false */
            has_previous_page: boolean;
            page_size: components["schemas"]["Pagination.PageSize"];
            start_cursor: components["schemas"]["Pagination.Cursor"];
            total_count: components["schemas"]["Pagination.TotalCount"];
        };
        /**
         * Billing.ListPlansResponse
         * @description Shows current plans for a workspace
         */
        "Billing.ListPlansResponse": {
            available_plans: components["schemas"]["Billing.PlanTemplate"][];
            customer_portal_url?: components["schemas"]["Common.NullableURL"];
            effective_plan: components["schemas"]["Billing.Plan"];
            incomplete_plans: components["schemas"]["Billing.Plan"][];
            /** @description All configured in system self-serve plan templates.
             *     Can be used to render configured limits for any self-serve plan.
             *      */
            templates: components["schemas"]["Billing.PlanTemplate"][];
        };
        /** Billing.UsageLimitWithUsage */
        "Billing.UsageLimitWithUsage": {
            aggregation: components["schemas"]["Billing.LimitAggregation"];
            limit_usage: components["schemas"]["Common.Integer"];
            limit_value: components["schemas"]["Common.Integer"] | components["schemas"]["Billing.UnlimitedValue"];
            name: components["schemas"]["Billing.LimitName"];
            scope: components["schemas"]["Billing.LimitScope"];
            type: components["schemas"]["Billing.LimitType"];
        };
        /** Projects.CollectionPropertyResponse */
        "Projects.CollectionPropertyResponse": {
            name: string;
            property_id?: components["schemas"]["Common.UUID"];
            /** @enum {string} */
            type: "text" | "json";
        };
        /**
         * Projects.UpdateSingleSelectPropertyRequest
         * @description Update specified fields of a Property
         */
        "Projects.UpdateSingleSelectPropertyRequest": {
            config: components["schemas"]["Projects.UpdateSingleSelectPropertyConfig"];
            description: string | null;
            /** @deprecated */
            input_ids?: components["schemas"]["Common.UUID"][] | null;
            inputs?: components["schemas"]["Projects.PropertyInput"][] | null;
            name: string;
            tool: components["schemas"]["Projects.Common.PropertyTool"];
            /** @enum {string} */
            type: "single_select";
        };
        /** Library.LibraryAttributesResponse */
        "Library.LibraryAttributesResponse": {
            input_references: components["schemas"]["Library.InputReference"][];
            /**
             * @description The name of the entity
             * @example My Entity
             */
            name: string | null;
        };
        /**
         * Projects.ViewPropertyOptions
         * @description View-specific property options
         */
        "Projects.ViewPropertyOptions": {
            block_workers_edits?: components["schemas"]["Projects.FieldReadonlyOption"];
            property_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Projects.Grounding.Claim
         * @description Grounding claim extracted from the field
         */
        "Projects.Grounding.Claim": {
            location: components["schemas"]["Projects.Grounding.Location"];
            source_indices: number[];
        };
        /**
         * Projects.RecalculateEntitiesRequest
         * @description Entity recalculate request
         */
        "Projects.RecalculateEntitiesRequest": {
            /**
             * @description When false, only stale fields will be recalculated.
             * @default false
             */
            force: boolean;
            property_ids?: components["schemas"]["Projects.PropertyIdOrSlugList"];
        };
        /**
         * Users.ResourceMemberResponse
         * @description A member of a resource
         */
        "Users.ResourceMemberResponse": {
            /** @enum {string} */
            role: "owner" | "admin" | "editor" | "worker" | "reader";
            user: components["schemas"]["Users.UserResponse"];
        };
        /**
         * Common.NonNegativeInteger
         * @example 123
         */
        "Common.NonNegativeInteger": number;
        /**
         * AskGo.CreateProjectFromPromptResponse
         * @description Create project from prompt response
         */
        "AskGo.CreateProjectFromPromptResponse": {
            motivation: string;
            project: components["schemas"]["Projects.ProjectResponse"];
        };
        /**
         * Projects.Entities.FieldResponse
         * @description A field
         */
        "Projects.Entities.FieldResponse": {
            created_at: components["schemas"]["Common.DateTime"];
            entity_id: components["schemas"]["Common.UUID"];
            error_message: string | null;
            ground_truth: boolean;
            manual_value: components["schemas"]["Projects.Entities.FieldValueResponse"];
            property_hash: string | null;
            property_id: components["schemas"]["Common.UUID"];
            property_type: components["schemas"]["Projects.Common.PropertyType"];
            status: components["schemas"]["Projects.ListEntities.FieldStatus"];
            tool_error_message?: string | null;
            tool_metadata?: components["schemas"]["Projects.ListEntities.FieldMetadataResponse"];
            tool_status?: components["schemas"]["Projects.ListEntities.FieldStatus"];
            tool_value: components["schemas"]["Projects.Entities.FieldValueResponse"];
            updated_at: components["schemas"]["Common.DateTime"];
        };
        /**
         * Imports.FormatOptionsCSV
         * @description CSV format options
         */
        "Imports.FormatOptionsCSV": {
            /** @default false */
            first_row_header: boolean;
            /** @enum {string} */
            separator: "," | ";" | "\t";
        };
        /**
         * Projects.UpdateUserSelectPropertyRequest
         * @description Update specified fields of a Property
         */
        "Projects.UpdateUserSelectPropertyRequest": {
            config: components["schemas"]["Projects.UpdateSingleSelectPropertyConfig"];
            description: string | null;
            /** @deprecated */
            input_ids?: components["schemas"]["Common.UUID"][] | null;
            inputs?: components["schemas"]["Projects.PropertyInput"][] | null;
            name: string;
            tool: components["schemas"]["Projects.Common.PropertyTool"];
            /** @enum {string} */
            type: "user_select";
        };
        /**
         * Automations.UrlAction
         * @description Webhook action
         */
        "Automations.UrlAction": {
            /** @enum {string} */
            type: "webhook";
            url: string;
        };
        /** Billing.UsageLimitsWithUsage */
        "Billing.UsageLimitsWithUsage": (components["schemas"]["Billing.UsageLimit"] | components["schemas"]["Billing.UsageLimitWithUsage"])[];
        /**
         * Projects.ListViewsResponse
         * @description List project views response
         */
        "Projects.ListViewsResponse": {
            data: components["schemas"]["Projects.ViewResponse"][];
        };
        /** Imports.PrepareImportRequest */
        "Imports.PrepareImportRequest": components["schemas"]["Imports.PrepareImportRequestExistingProject"] | components["schemas"]["Imports.PrepareImportRequestNewProject"];
        /**
         * Imports.ErrorDetails
         * @description Error details. When field has status `error`, this represents reason for that error.
         *     When field has status `complete`, this indicates that import wasn't processed in full due to
         *     error that got ignored (e.g. billing error when setting `billing_errors_as_warnings` is `true`).
         *
         */
        "Imports.ErrorDetails": {
            /** @enum {string} */
            code: "internal_server_error" | "system_limits_exceeded" | "billing_limits_exceeded" | "bad_request" | "invalid_import_file";
            message: string | null;
        } | null;
        /**
         * AskGo.Action
         * @description Action
         */
        "AskGo.Action": {
            action: string;
            metadata: {
                [key: string]: string | undefined;
            };
        };
        /** Projects.PropertyLayoutSlug */
        "Projects.PropertyLayoutSlug": {
            height: components["schemas"]["Common.NonNegativeInteger"];
            property_slug: components["schemas"]["Projects.PropertySlug"];
            width: components["schemas"]["Common.NonNegativeInteger"];
            x: components["schemas"]["Common.Integer"];
            y: components["schemas"]["Common.Integer"];
        };
        /**
         * Projects.UpdateMultiSelectPropertyRequest
         * @description Update specified fields of a Property
         */
        "Projects.UpdateMultiSelectPropertyRequest": {
            config: components["schemas"]["Projects.UpdateMultiSelectPropertyConfig"];
            description: string | null;
            /** @deprecated */
            input_ids?: components["schemas"]["Common.UUID"][] | null;
            inputs?: components["schemas"]["Projects.PropertyInput"][] | null;
            name: string;
            tool: components["schemas"]["Projects.Common.PropertyTool"];
            /** @enum {string} */
            type: "multi_select";
        };
        /**
         * Projects.Grounding.Grounding
         * @description Grounding information for the field
         */
        "Projects.Grounding.Grounding": {
            claims: components["schemas"]["Projects.Grounding.Claim"][];
            sources: components["schemas"]["Projects.Grounding.Source"][];
        };
        /**
         * WorkspaceInvitations.CreateInvitationResponse
         * @description Create invitation response. Describes each created invitation (or an error if it failed)
         */
        "WorkspaceInvitations.CreateInvitationResponse": {
            data: components["schemas"]["WorkspaceInvitations.InvitedUser"][];
        };
        /**
         * TYPED_FILE_URL
         * @description Update a field value request
         */
        TYPED_FILE_URL: {
            file_name?: string | null;
            file_url: string | null;
        };
        /**
         * Projects.ListEntities.ListEntitiesOrderBy
         * @description List of field names to order by
         * @example [
         *       "id"
         *     ]
         */
        "Projects.ListEntities.ListEntitiesOrderBy": "id"[] | null;
        /**
         * Projects.TablePropertyConfigResponse
         * @description Table property configuration
         */
        "Projects.TablePropertyConfigResponse": {
            properties?: components["schemas"]["Projects.CollectionPropertyResponse"][];
            subproject_config: components["schemas"]["Projects.SubProjectPropertyConfigResponse"];
        };
        /**
         * Projects.CloneProjectRequest
         * @description Clone project request
         */
        "Projects.CloneProjectRequest": {
            name: string | null;
            template_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Billing.LimitScope
         * @enum {string}
         */
        "Billing.LimitScope": "workspace" | "project" | "calculation";
        /**
         * Projects.AddPDFPropertyRequest
         * @description Add property request
         */
        "Projects.AddPDFPropertyRequest": {
            /** @description Initial configuration for PDF property */
            config: {
                /** @enum {string} */
                splitter: "none" | "page_split";
            };
            default_view_id?: components["schemas"]["Common.UUID"];
            description: string | null;
            /** @deprecated */
            input_ids?: components["schemas"]["Common.UUID"][] | null;
            inputs?: components["schemas"]["Projects.PropertyInput"][] | null;
            name: string;
            tool: components["schemas"]["Projects.Common.PropertyTool"];
            /** @enum {string} */
            type: "pdf";
        };
        /**
         * Projects.UpdateBasicPropertyRequest
         * @description Update specified fields of a Property
         */
        "Projects.UpdateBasicPropertyRequest": {
            description: string | null;
            /** @deprecated */
            input_ids?: components["schemas"]["Common.UUID"][] | null;
            inputs?: components["schemas"]["Projects.PropertyInput"][] | null;
            name: string;
            tool: components["schemas"]["Projects.Common.PropertyTool"];
            type: components["schemas"]["Projects.BasicPropertyType"];
        };
        /**
         * Projects.StartFileUploadRequest
         * @description Request for a URL for a file upload for a field
         */
        "Projects.StartFileUploadRequest": {
            filename: string;
        };
        /**
         * Projects.ListProjectsOrderBy
         * @description List of field names to order by
         * @example [
         *       "name",
         *       "updated_at"
         *     ]
         */
        "Projects.ListProjectsOrderBy": ("id" | "name" | "updated_at")[] | null;
        /**
         * Projects.BasicPropertyType
         * @enum {string}
         */
        "Projects.BasicPropertyType": "text" | "file" | "json" | "url";
        /**
         * Projects.SetFieldValueRequest
         * @description Set a field value request
         */
        "Projects.SetFieldValueRequest": components["schemas"]["Projects.SetFieldValueArrayRequest"] | components["schemas"]["Projects.SetFieldValueFromTextRequest"];
        /**
         * Projects.Entities.FieldSelectResponse
         * @description Response for a select value
         */
        "Projects.Entities.FieldSelectResponse": {
            raw_text: string | null;
            updated_by: (components["schemas"]["Common.UUID"] | components["schemas"]["Projects.Common.PropertyTool"]) | null;
            value: string[] | null;
        };
        /**
         * Projects.PropertyLayout
         * @description Property layout
         */
        "Projects.PropertyLayout": components["schemas"]["Projects.PropertyLayoutId"] | components["schemas"]["Projects.PropertyLayoutSlug"];
        /**
         * Imports.Settings
         * @description General, format independent settings for the import.
         */
        "Imports.Settings": {
            /** @default true */
            billing_errors_as_warnings: boolean;
            entity_limit?: number | null;
        } | null;
        /**
         * Billing.LimitType
         * @enum {string}
         */
        "Billing.LimitType": "hard" | "soft";
        /**
         * Projects.Grounding.BoundingBox
         * @description Bounding box for a grounding source
         */
        "Projects.Grounding.BoundingBox": {
            page: number;
            xmax: number;
            xmin: number;
            ymax: number;
            ymin: number;
        };
        /** Projects.PropertyIdOrSlugList */
        "Projects.PropertyIdOrSlugList": components["schemas"]["Projects.PropertyIdOrSlug"][];
        /**
         * Common.FileExtension
         * @example png
         * @enum {string}
         */
        "Common.FileExtension": "jpg" | "png" | "bmp" | "pdf" | "jpeg" | "gif" | "tiff" | "webp" | "txt" | "csv" | "md" | "html" | "json";
        /**
         * Projects.Entities.FieldFileResponse
         * @description Response for a file value
         */
        "Projects.Entities.FieldFileResponse": {
            ocr_pages?: components["schemas"]["Projects.Entities.OCRPage"][];
            original_filename: string | null;
            updated_by: (components["schemas"]["Common.UUID"] | components["schemas"]["Projects.Common.PropertyTool"]) | null;
            value: string | null;
        };
        /**
         * Projects.Grounding.Location
         * @description Location for a claim in the grounded text
         */
        "Projects.Grounding.Location": {
            length: number;
            offset: number;
        };
        /**
         * Tools.KeyManager.ToolKeyResponse
         * @description Tool key metadata.
         */
        "Tools.KeyManager.ToolKeyResponse": {
            id: components["schemas"]["Common.UUID"];
            integration: components["schemas"]["Tools.KeyManager.Integration"];
            secret_prefix: string;
            workspace_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Workspaces.UpdateWorkspaceIconRequest
         * @description Upload of workspace icon
         */
        "Workspaces.UpdateWorkspaceIconRequest": {
            /** Format: binary */
            file: string;
        };
        /** Common.Integer */
        "Common.Integer": number;
        /**
         * Exports.ListExportsResponse
         * @description List export response
         */
        "Exports.ListExportsResponse": {
            data: components["schemas"]["Exports.ExportResponse"][];
            metadata: components["schemas"]["Pagination.PageMetadata"];
        };
        /**
         * Billing.Plan
         * @description Represents plan attached to a workspace
         */
        "Billing.Plan": {
            billing_period: components["schemas"]["Billing.PlanBillingPeriod"];
            current_period_end: components["schemas"]["Common.DateTime"];
            current_period_start: components["schemas"]["Common.DateTime"];
            id: components["schemas"]["Common.UUID"];
            limits: components["schemas"]["Billing.UsageLimitsWithUsage"];
            name: components["schemas"]["Billing.PlanName"];
            provider: components["schemas"]["Billing.PlanProvider"];
            status: components["schemas"]["Billing.PlanStatus"];
        };
        /**
         * Projects.AddUserSelectPropertyRequest
         * @description Add property request
         */
        "Projects.AddUserSelectPropertyRequest": {
            /** @description Initial configuration for user-select property.
             *     Allows to provide initial users.
             *      */
            config: {
                default_option?: components["schemas"]["Projects.SelectDefaultOption"];
                options?: {
                    color?: components["schemas"]["Projects.SelectOptionColor"];
                    value: string;
                }[];
            };
            default_view_id?: components["schemas"]["Common.UUID"];
            description: string | null;
            /** @deprecated */
            input_ids?: components["schemas"]["Common.UUID"][] | null;
            inputs?: components["schemas"]["Projects.PropertyInput"][] | null;
            name: string;
            tool: components["schemas"]["Projects.Common.PropertyTool"];
            /** @enum {string} */
            type: "user_select";
        };
        /**
         * Projects.UpdatePDFPropertyRequest
         * @description Update specified fields of a Property
         */
        "Projects.UpdatePDFPropertyRequest": {
            /** @description Configuration for PDF property */
            config: {
                /** @enum {string} */
                splitter: "none" | "page_split";
            };
            description: string | null;
            /** @deprecated */
            input_ids?: components["schemas"]["Common.UUID"][] | null;
            inputs?: components["schemas"]["Projects.PropertyInput"][] | null;
            name: string;
            tool: components["schemas"]["Projects.Common.PropertyTool"];
            /** @enum {string} */
            type: "pdf";
        };
        /**
         * Billing.PlanUpgradeRequest
         * @description Represents plan upgrade request.
         */
        "Billing.PlanUpgradeRequest": {
            billing_period: components["schemas"]["Billing.PlanBillingPeriod"];
            plan_name: components["schemas"]["Billing.PlanName"];
        };
        /**
         * Workspaces.WorkspaceMetadata
         * @description Metadata for a workspace
         */
        "Workspaces.WorkspaceMetadata": {
            tolt_referral?: string;
        };
        /** Common.APIError */
        "Common.APIError": {
            /** @example bad_request */
            code: string;
            /** @example Bad Request */
            message: string;
        };
        /**
         * Projects.Entities.FieldTextResponse
         * @description Response for a text value
         */
        "Projects.Entities.FieldTextResponse": {
            grounding?: components["schemas"]["Projects.Grounding.Grounding"];
            /** @default false */
            has_grounding: boolean;
            updated_by: (components["schemas"]["Common.UUID"] | components["schemas"]["Projects.Common.PropertyTool"]) | null;
            value: string | null;
        };
        /**
         * Projects.CreateEntityRequest
         * @description Create entity request
         */
        "Projects.CreateEntityRequest": {
            /**
             * fields
             * @description Fields to prefill with values, note that the field key is the property id or property slug for that field.
             *             Fields not mentioned are going to be set to an empty value.
             */
            fields?: {
                [key: string]: components["schemas"]["field_value"] | undefined;
            };
        };
        /**
         * WorkspaceInvitations.ListInvitationsResponse
         * @description List invitations response
         */
        "WorkspaceInvitations.ListInvitationsResponse": {
            data: components["schemas"]["WorkspaceInvitations.WorkspaceInvitationResponse"][];
            metadata: components["schemas"]["Pagination.PageMetadata"];
        };
        /**
         * Common.DateTime
         * Format: date-time
         * @description DateTime in RFC3339 format
         * @example 2020-01-20T14:00:00Z
         */
        "Common.DateTime": string;
        /**
         * Tools.Integrations.ToolIntegrationsResponse
         * @description Response with list of all configured tool integrations.
         */
        "Tools.Integrations.ToolIntegrationsResponse": {
            data?: components["schemas"]["Tools.Integrations.Integration"][];
        };
        /**
         * WorkspaceInvitations.CreateInvitationRequest
         * @description Create invitation request. Invites one or more users into a workspace
         */
        "WorkspaceInvitations.CreateInvitationRequest": {
            invitations: components["schemas"]["WorkspaceInvitations.InviteUser"][];
        };
        /**
         * AskGo.Message
         * @description Message
         */
        "AskGo.Message": {
            actions?: components["schemas"]["AskGo.Action"][];
            author_id: components["schemas"]["Common.NullableUUID"];
            id: components["schemas"]["Common.UUID"];
            text: string;
            timestamp: components["schemas"]["Common.DateTime"];
        };
        /**
         * Tools.KeyManager.SecretProjectId
         * @description The project identifier associated with the secret. Only use with integrations that
         *     require it (GoogleAI, Azure).
         *
         */
        "Tools.KeyManager.SecretProjectId": string | null;
        /**
         * Tools.KeyManager.Integration
         * @enum {string}
         */
        "Tools.KeyManager.Integration": "open_ai" | "google_ai" | "azure_open_ai" | "anthropic" | "mistral" | "bing_search" | "azure_ocr" | "internal" | "fire_crawl" | "amazon_textract";
        /**
         * Projects.ListEntities.FieldSelectResponse
         * @description Response for a select value
         */
        "Projects.ListEntities.FieldSelectResponse": {
            raw_text: string | null;
            updated_by: (components["schemas"]["Common.UUID"] | components["schemas"]["Projects.Common.PropertyTool"]) | null;
            value: string[] | null;
        };
        /**
         * Imports.ListImportsResponse
         * @description List import response
         */
        "Imports.ListImportsResponse": {
            data: components["schemas"]["Imports.ImportResponse"][];
            metadata: components["schemas"]["Pagination.PageMetadata"];
        };
        /**
         * ApiKeys.ListApiKeysOrderBy
         * @description List of field names to order by
         * @example [
         *       "id"
         *     ]
         */
        "ApiKeys.ListApiKeysOrderBy": "id"[] | null;
        /**
         * Exports.ListExportsOrderBy
         * @description List of field names to order by
         * @example [
         *       "id"
         *     ]
         */
        "Exports.ListExportsOrderBy": "id"[] | null;
        /**
         * Projects.ProjectCoverImageURLs
         * @description Project's cover image URLs
         */
        "Projects.ProjectCoverImageURLs": {
            high: components["schemas"]["Common.URL"];
            low: components["schemas"]["Common.URL"];
        };
        /**
         * WorkspaceInvitations.InvitedUserError
         * @description Invited user error
         */
        "WorkspaceInvitations.InvitedUserError": {
            email: components["schemas"]["Common.Email"];
            error_message: string;
            role: components["schemas"]["WorkspaceInvitations.Role"];
            /** @enum {string} */
            state: "error";
        };
        /** Library.InputReference */
        "Library.InputReference": {
            project_id: components["schemas"]["Common.UUID"];
            property_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Projects.UpdateViewRequest
         * @description Update project view request
         */
        "Projects.UpdateViewRequest": {
            assignable_property_id?: components["schemas"]["Common.NullableUUID"];
            /** @default [] */
            filters: components["schemas"]["Projects.ViewFilter"][];
            name?: string;
            property_ids: components["schemas"]["Projects.PropertyIdOrSlugList"];
            property_layouts: components["schemas"]["Projects.PropertyLayout"][];
            /** @default [] */
            property_options: components["schemas"]["Projects.ViewPropertyOptions"][];
        };
        /**
         * Projects.ListEntities.ListEntitiesResponse
         * @description List entities response
         */
        "Projects.ListEntities.ListEntitiesResponse": {
            data: components["schemas"]["Projects.ListEntities.EntityResponse"][];
            metadata: components["schemas"]["Pagination.PageMetadata"];
        };
        /**
         * Projects.ListEntities.FieldValueResponse
         * @description Response for a field value
         */
        "Projects.ListEntities.FieldValueResponse": components["schemas"]["Projects.ListEntities.FieldFileResponse"] | components["schemas"]["Projects.ListEntities.FieldTextResponse"] | components["schemas"]["Projects.ListEntities.FieldSelectResponse"];
        /**
         * Imports.ListImportsOrderBy
         * @description List of field names to order by.
         *     By default the list is ordered by `created_at` in descending order.
         *
         * @example [
         *       "id"
         *     ]
         */
        "Imports.ListImportsOrderBy": ("id" | "created_at")[] | null;
        /**
         * Common.NullableURL
         * @example https://example.com
         */
        "Common.NullableURL": string | null;
        /**
         * EntityFilters.ActivateViewId
         * @description Filter entities based on active view id
         */
        "EntityFilters.ActivateViewId": {
            matcher: {
                /** @enum {string} */
                name: "any_of";
                values: components["schemas"]["Common.UUID"][];
            } | {
                /** @enum {string} */
                name: "none_of";
                values: components["schemas"]["Common.UUID"][];
            };
            /** @enum {string} */
            subject: "active_view_id";
        };
        /**
         * Tools.KeyManager.SecretValue
         * @description The secret value for the Tool's credential.
         *     In most cases this is just an ApiKey or similar.
         *     For GoogleAI this needs to be valid JSON Service Account credential.
         *
         */
        "Tools.KeyManager.SecretValue": string;
        /**
         * Billing.PlanStatus
         * @description Status of the plan
         * @enum {string}
         */
        "Billing.PlanStatus": "active" | "canceled" | "pending_checkout" | "pending_payment" | "available";
        /**
         * Pagination.Limit
         * @description The maximum number of records to return when using `offset` pagination
         * @example 50
         */
        "Pagination.Limit": number | null;
        /**
         * Projects.ListProjectsResponse
         * @description List projects response
         */
        "Projects.ListProjectsResponse": {
            data: components["schemas"]["Projects.ProjectResponseInList"][];
            metadata: components["schemas"]["Pagination.PageMetadata"];
        };
        /**
         * AskGo.ListSessionsResponse
         * @description List sessions response
         */
        "AskGo.ListSessionsResponse": {
            data: components["schemas"]["AskGo.SessionResponse"][];
            metadata: components["schemas"]["Pagination.PageMetadata"];
        };
        /**
         * Billing.PlanName
         * @description Name of the plan
         * @enum {string}
         */
        "Billing.PlanName": "free" | "pro" | "enterprise";
        /**
         * Projects.ProjectResponse
         * @description A project
         */
        "Projects.ProjectResponse": {
            cover_image_urls: components["schemas"]["Projects.ProjectCoverImageURLs"];
            id: components["schemas"]["Common.UUID"];
            main_view_id: components["schemas"]["Common.NullableUUID"];
            name: string | null;
            parent_property: components["schemas"]["Projects.PropertyResponse"] | null;
            properties: components["schemas"]["Projects.PropertyResponse"][];
            views: components["schemas"]["Projects.ViewResponse"][];
            workspace_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Projects.Common.PropertyType
         * @enum {string}
         */
        "Projects.Common.PropertyType": "single_select" | "multi_select" | "user_select" | "text" | "file" | "json" | "pdf" | "collection" | "url";
        /**
         * Projects.StartFileUploadResponse
         * @description URL to upload a file for a field.
         */
        "Projects.StartFileUploadResponse": {
            confirm_upload_url: components["schemas"]["Common.URL"];
            file_upload_url: components["schemas"]["Common.URL"];
        };
        /**
         * Library.ProjectResponse
         * @description A project
         */
        "Library.ProjectResponse": {
            cover_image_urls: components["schemas"]["Projects.ProjectCoverImageURLs"];
            id: components["schemas"]["Common.UUID"];
            main_view_id: components["schemas"]["Common.NullableUUID"];
            name: string | null;
            parent_property: components["schemas"]["Projects.PropertyResponse"] | null;
            properties: components["schemas"]["Projects.PropertyResponse"][];
            views: components["schemas"]["Projects.ViewResponse"][];
            workspace_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Workspaces.WorkspaceDisabled
         * @description Whether the workspace is disabled
         */
        "Workspaces.WorkspaceDisabled": boolean;
        /**
         * Projects.ListPropertiesResponse
         * @description A list of properties
         */
        "Projects.ListPropertiesResponse": {
            data?: components["schemas"]["Projects.PropertyResponse"][];
        };
        /**
         * Projects.Entities.FieldValueResponse
         * @description Response for a field value
         */
        "Projects.Entities.FieldValueResponse": components["schemas"]["Projects.Entities.FieldFileResponse"] | components["schemas"]["Projects.Entities.FieldTextResponse"] | components["schemas"]["Projects.Entities.FieldSelectResponse"];
        /**
         * TYPED_SELECT
         * @description Update a field value request for properties with array values
         */
        TYPED_SELECT: {
            options: string[];
        };
        /**
         * Tools.Integrations.ToggleIntegrationStateRequest
         * @description Request to toggle integration state.
         */
        "Tools.Integrations.ToggleIntegrationStateRequest": {
            /** @description Whether the integration should be enabled or disabled. */
            enabled: boolean;
            integration: components["schemas"]["Tools.Integrations.IntegrationName"];
        };
        /**
         * Imports.Format
         * @enum {string}
         */
        "Imports.Format": "csv";
        /**
         * Projects.Entities.EntityResponse
         * @description An entity
         */
        "Projects.Entities.EntityResponse": {
            active_view_ids?: components["schemas"]["Common.UUID"][];
            fields: {
                [key: string]: components["schemas"]["Projects.Entities.FieldResponse"] | undefined;
            };
            id: components["schemas"]["Common.UUID"];
            parent_entity_id?: components["schemas"]["Common.NullableUUID"];
            project_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Tools.Integrations.SupportedInputs
         * @description Supported input for the tool.
         */
        "Tools.Integrations.SupportedInputs": {
            max_input_count: components["schemas"]["Tools.Integrations.MaxInputCount"];
            properties: components["schemas"]["Projects.Common.PropertyType"][];
        };
        /**
         * Projects.AddBasicPropertyRequest
         * @description Add property request
         */
        "Projects.AddBasicPropertyRequest": {
            default_view_id?: components["schemas"]["Common.UUID"];
            description: string | null;
            /** @deprecated */
            input_ids?: components["schemas"]["Common.UUID"][] | null;
            inputs?: components["schemas"]["Projects.PropertyInput"][] | null;
            name: string;
            tool: components["schemas"]["Projects.Common.PropertyTool"];
            type: components["schemas"]["Projects.BasicPropertyType"];
        };
        /**
         * Tools.KeyManager.UpsertToolKeyRequest
         * @description Request to create or update a tool key.
         */
        "Tools.KeyManager.UpsertToolKeyRequest": {
            integration: components["schemas"]["Tools.KeyManager.Integration"];
            secret_project_id?: components["schemas"]["Tools.KeyManager.SecretProjectId"];
            secret_value: components["schemas"]["Tools.KeyManager.SecretValue"];
        };
        /**
         * Automations.ListAutomationsOrderBy
         * @description List of field names to order by
         * @example [
         *       "id"
         *     ]
         */
        "Automations.ListAutomationsOrderBy": "id"[] | null;
        /**
         * Projects.ListEntities.ListEntityIdsResponse
         * @description List entity IDs response
         */
        "Projects.ListEntities.ListEntityIdsResponse": {
            data: components["schemas"]["Common.UUID"][];
            metadata: components["schemas"]["Pagination.PageMetadata"];
        };
        /**
         * Projects.Common.PropertyTool
         * @enum {string}
         */
        "Projects.Common.PropertyTool": "manual" | "dall_e_3" | "imagen" | "whisper" | "gpt_4" | "gpt_4o" | "gpt_3_5" | "gpt_4o_azure" | "gpt_3_5_azure" | "gpt_4o_grounded" | "go" | "gemini_pro" | "gemini_1_5_pro" | "gemini_1_5_flash" | "gemini_pro_vision" | "claude_3_opus" | "claude_3_5_sonnet" | "claude_3_sonnet" | "claude_3_haiku" | "mixtral_8x7b" | "mistral_large" | "bing_search" | "ocr" | "pdf_split" | "url_scrape" | "code" | "aws_ocr";
        /**
         * EntityFilters.SimpleFilter
         * @description Simple filter specifies rule that subject has to fulfill. Each simple filter consist of `subject` and `matcher`. Subject is name of property you want to filter on. For example if you want to filter by entity id you should specify {subject: 'entity_id'}. Next you have to specify matcher which defines how you would like to filer. If you are interested in any of entities within array of entity ids you should specify: {matcher: {name: 'any_of', values: [list of entity ids]}}
         */
        "EntityFilters.SimpleFilter": components["schemas"]["EntityFilters.ActivateViewId"] | components["schemas"]["EntityFilters.EntityId"] | components["schemas"]["EntityFilters.SelectOptionValue"] | components["schemas"]["EntityFilters.ParentEntityId"] | components["schemas"]["EntityFilters.Status"];
        /**
         * EntityFilters.ParentEntityId
         * @description Filter entities based on parent entity id
         */
        "EntityFilters.ParentEntityId": {
            matcher: {
                /** @enum {string} */
                name: "any_of";
                values: components["schemas"]["Common.UUID"][];
            } | {
                /** @enum {string} */
                name: "none_of";
                values: components["schemas"]["Common.UUID"][];
            };
            /** @enum {string} */
            subject: "parent_entity_id";
        };
        /**
         * Common.NullableDateTime
         * Format: date-time
         * @description DateTime in RFC3339 format
         * @example 2020-01-20T14:00:00Z
         */
        "Common.NullableDateTime": string | null;
        /**
         * Pagination.First
         * @description The number of records to return after the provided cursor; used in combination with `after`
         * @example 50
         */
        "Pagination.First": number | null;
        /**
         * Projects.PropertySlug
         * @description Property slug
         * @example property-name
         */
        "Projects.PropertySlug": string;
        /**
         * WorkspaceInvitations.InvitedUser
         * @description Invited user
         */
        "WorkspaceInvitations.InvitedUser": components["schemas"]["WorkspaceInvitations.InvitedUserSuccess"] | components["schemas"]["WorkspaceInvitations.InvitedUserError"];
        /**
         * Projects.ListEntities.FieldMetadataResponse
         * @description Response for a field metadata
         */
        "Projects.ListEntities.FieldMetadataResponse": {
            favicon?: {
                url?: string;
            };
            screenshot?: {
                url?: string;
            };
        };
        /**
         * Billing.LimitName
         * @enum {string}
         */
        "Billing.LimitName": "project_count" | "entity_count" | "property_count" | "member_count" | "field_count" | "view_count" | "export_count" | "tool_token_usage" | "tool_input_token_usage" | "tool_output_token_usage" | "input_file_size_bytes";
        /**
         * Automations.Action
         * @description Action of the automation to execute
         */
        "Automations.Action": components["schemas"]["Automations.UrlAction"];
        /**
         * Tools.Integrations.SupportedOutputs
         * @description Supported output for the tool.
         */
        "Tools.Integrations.SupportedOutputs": {
            properties: components["schemas"]["Projects.Common.PropertyType"][];
        };
        /**
         * Workspaces.WorkspaceResponse
         * @description A workspace
         */
        "Workspaces.WorkspaceResponse": {
            created_at: components["schemas"]["Common.DateTime"];
            disabled?: components["schemas"]["Workspaces.WorkspaceDisabled"];
            icon_url?: string;
            id: components["schemas"]["Common.UUID"];
            metadata: components["schemas"]["Workspaces.WorkspaceMetadata"];
            name: string;
            role?: components["schemas"]["Workspaces.WorkspaceRole"];
        };
        /**
         * WorkspaceInvitations.OrderBy
         * @description List of field names to order by
         * @example [
         *       "id"
         *     ]
         */
        "WorkspaceInvitations.OrderBy": "id"[] | null;
        /**
         * Tools.Integrations.ToolName
         * @enum {string}
         */
        "Tools.Integrations.ToolName": "manual" | "dall_e_3" | "imagen" | "whisper" | "gpt_4" | "gpt_4o" | "gpt_3_5" | "gpt_4o_azure" | "gpt_3_5_azure" | "gpt_4o_grounded" | "go" | "gemini_pro" | "gemini_1_5_pro" | "gemini_1_5_flash" | "gemini_pro_vision" | "claude_3_opus" | "claude_3_5_sonnet" | "claude_3_sonnet" | "claude_3_haiku" | "mixtral_8x7b" | "mistral_large" | "bing_search" | "ocr" | "pdf_split" | "url_scrape" | "code" | "aws_ocr";
        /**
         * Projects.SelectOptionResponse
         * @description Response for a select option
         */
        "Projects.SelectOptionResponse": {
            color?: components["schemas"]["Projects.SelectOptionColor"];
            value: string;
        };
        /**
         * bulk_delete_entities
         * @description Bulk delete request
         */
        bulk_delete_entities: {
            /** @description List of entity IDs to delete */
            entity_ids: components["schemas"]["Common.UUID"][];
        };
        /** Projects.SelectOptionColor */
        "Projects.SelectOptionColor": string | null;
        /**
         * Imports.PrepareImportRequestExistingProject
         * @description Prepare import request
         */
        "Imports.PrepareImportRequestExistingProject": {
            format: components["schemas"]["Imports.Format"];
            format_options: components["schemas"]["Imports.FormatOptions"];
            project_id: components["schemas"]["Common.UUID"];
            settings?: components["schemas"]["Imports.Settings"];
        };
        /**
         * Projects.FieldReadonlyOption
         * @description Whether the fields of that property are readonly for worker users
         * @default false
         */
        "Projects.FieldReadonlyOption": boolean;
        /**
         * Users.ListResourceMembersResponse
         * @description List members response
         */
        "Users.ListResourceMembersResponse": {
            data: components["schemas"]["Users.ResourceMemberResponse"][];
        };
        /**
         * Projects.CreateViewRequest
         * @description Create a project view request
         */
        "Projects.CreateViewRequest": {
            assignable_property_id?: components["schemas"]["Common.NullableUUID"];
            /** @default [] */
            filters: components["schemas"]["Projects.ViewFilter"][];
            name: string;
            property_ids: components["schemas"]["Projects.PropertyIdOrSlugList"];
            property_layouts: components["schemas"]["Projects.PropertyLayout"][];
            /** @default [] */
            property_options: components["schemas"]["Projects.ViewPropertyOptions"][];
        };
        /**
         * EntityFilters.Filter
         * @description Filter can be `simple` or `group`. If you want to filter by one `subject` eg. `item name`. You can specify `simple filter` for given `subject` and `matcher`. For more details please see details of `item name filter` or other simple filters. If you want to to filter item by more than one filter You need to use `group filter` which gives possibility to join `filters` using `and`, `or` operators.
         */
        "EntityFilters.Filter": components["schemas"]["EntityFilters.GroupFilter"] | components["schemas"]["EntityFilters.SimpleFilter"];
        /**
         * Tools.KeyManager.ListToolKeysResponse
         * @description Response with list of all configured tool keys.
         */
        "Tools.KeyManager.ListToolKeysResponse": {
            data?: components["schemas"]["Tools.KeyManager.ToolKeyResponse"][];
        };
        /**
         * Users.UserMeResponse
         * @description The currently logged in user
         */
        "Users.UserMeResponse": {
            accepted_terms_and_conditions: boolean;
            created_at: components["schemas"]["Common.DateTime"];
            email?: string;
            first_name?: string;
            id: components["schemas"]["Common.UUID"];
            last_name?: string;
            marketing_optin: boolean;
            show_tutorials: boolean;
            signup_completed: boolean;
        };
        /**
         * WorkspaceInvitations.InvitedUserSuccess
         * @description Invited user success
         */
        "WorkspaceInvitations.InvitedUserSuccess": {
            email: components["schemas"]["Common.Email"];
            invite_url: string;
            role: components["schemas"]["WorkspaceInvitations.Role"];
            /** @enum {string} */
            state?: "success";
        };
        /** Billing.UsageLimits */
        "Billing.UsageLimits": components["schemas"]["Billing.UsageLimit"][];
        /**
         * Projects.SelectMaxSelectedWithDefault
         * @description Maximum number of options that can be selected on any field.
         *     0 for unlimited.
         *
         * @default 0
         */
        "Projects.SelectMaxSelectedWithDefault": number | null;
        /**
         * Projects.Grounding.Source
         * @description Grounding source information for the field
         */
        "Projects.Grounding.Source": {
            bounding_boxes: components["schemas"]["Projects.Grounding.BoundingBox"][];
            index: number;
            property_id: string;
        };
        /**
         * Projects.ListEntities.FieldTextResponse
         * @description Response for a text value
         */
        "Projects.ListEntities.FieldTextResponse": {
            /** @default false */
            has_grounding: boolean;
            updated_by: (components["schemas"]["Common.UUID"] | components["schemas"]["Projects.Common.PropertyTool"]) | null;
            value: string | null;
        };
        /**
         * Projects.ViewFilter
         * @description View filter
         */
        "Projects.ViewFilter": {
            property_id: components["schemas"]["Common.UUID"];
            select_option_value: string;
        };
        /**
         * Automations.EventsRequest
         * @description Events that will trigger the automation. If you omit event type or set filters to `false`, the automation
         *     will not trigger for that event type. If you set filters to `true` or an empty object, the automation will
         *     trigger for that event type without applying any filters. Otherwise you may provide a map of filters to
         *     apply before triggering the automation for that event type if that event type supports filters.
         *
         * @example {
         *       "entity.all_fields_completed": true,
         *       "entity.field_completed": {
         *         "property_id": "7bfc9df4-6010-41d8-9378-9f98990f35da",
         *         "select_option_value": "option1"
         *       }
         *     }
         */
        "Automations.EventsRequest": {
            "entity.all_fields_completed"?: boolean | Record<string, never>;
            "entity.created"?: boolean | Record<string, never>;
            "entity.field_completed"?: boolean | {
                property_id?: string;
                select_option_value?: string;
            };
            "project.created"?: boolean | Record<string, never>;
        };
        /**
         * Exports.CreateExportRequest
         * @description Create export request
         */
        "Exports.CreateExportRequest": {
            name: string;
        };
        /**
         * Pagination.Cursor
         * @description A base64 encoded value representing a cursor, or an element ID if applicable
         * @example ZXhhbXBsZQo=
         */
        "Pagination.Cursor": string | null;
        /**
         * Workspaces.CreateWorkspaceRequest
         * @description Create workspace request
         */
        "Workspaces.CreateWorkspaceRequest": {
            name?: string;
        };
        /**
         * Common.UUIDList
         * @default []
         */
        "Common.UUIDList": components["schemas"]["Common.UUID"][];
        /**
         * Tools.Integrations.Integration
         * @description Tool integration state.
         */
        "Tools.Integrations.Integration": {
            /** @description Whether the integration is enabled or disabled. */
            enabled: boolean;
            integration: components["schemas"]["Tools.Integrations.IntegrationName"];
            tools: components["schemas"]["Tools.Integrations.Tool"][];
        };
        /** String */
        String: string | null;
        /**
         * Projects.ListEntitiesRequest
         * @description List entities request
         */
        "Projects.ListEntitiesRequest": {
            after?: components["schemas"]["Pagination.Cursor"];
            before?: components["schemas"]["Pagination.Cursor"];
            filter?: components["schemas"]["EntityFilters.Filter"];
            first?: components["schemas"]["Pagination.First"];
            last?: components["schemas"]["Pagination.Last"];
            limit?: components["schemas"]["Pagination.Limit"];
            offset?: components["schemas"]["Pagination.Offset"];
            order_directions?: components["schemas"]["Pagination.OrderDirections"];
        };
        /**
         * Projects.Entities.OCRPage
         * @description OCR page metadata
         */
        "Projects.Entities.OCRPage": {
            height: number;
            number: number;
            offset: number;
            /** @enum {string} */
            unit: "inch" | "pixel";
            width: number;
        };
        /**
         * Projects.AddSingleSelectPropertyRequest
         * @description Add property request
         */
        "Projects.AddSingleSelectPropertyRequest": {
            /** @description Initial configuration for single-select property.
             *     Allows to provide initial select options.
             *      */
            config: {
                default_option?: components["schemas"]["Projects.SelectDefaultOption"];
                options?: {
                    color?: components["schemas"]["Projects.SelectOptionColor"];
                    value: string;
                }[];
            };
            default_view_id?: components["schemas"]["Common.UUID"];
            description: string | null;
            /** @deprecated */
            input_ids?: components["schemas"]["Common.UUID"][] | null;
            inputs?: components["schemas"]["Projects.PropertyInput"][] | null;
            name: string;
            tool: components["schemas"]["Projects.Common.PropertyTool"];
            /** @enum {string} */
            type: "single_select";
        };
        /**
         * Projects.ViewResponse
         * @description Project view response
         */
        "Projects.ViewResponse": {
            assignable_property_id: components["schemas"]["Common.NullableUUID"];
            filters: components["schemas"]["Projects.ViewFilter"][];
            id: components["schemas"]["Common.UUID"];
            name: string;
            project_id: components["schemas"]["Common.UUID"];
            property_ids: components["schemas"]["Common.UUIDList"];
            property_layouts: components["schemas"]["Projects.PropertyLayoutId"][];
            property_options?: components["schemas"]["Projects.ViewPropertyOptions"][];
        };
        /** Options */
        Options: string[];
        /**
         * Workspaces.ListWorkspacesResponse
         * @description List workspaces response
         */
        "Workspaces.ListWorkspacesResponse": {
            data: components["schemas"]["Workspaces.WorkspaceResponse"][];
        };
        /** Billing.UsageLimit */
        "Billing.UsageLimit": {
            aggregation: components["schemas"]["Billing.LimitAggregation"];
            limit_value: components["schemas"]["Common.Integer"] | components["schemas"]["Billing.UnlimitedValue"];
            name: components["schemas"]["Billing.LimitName"];
            scope: components["schemas"]["Billing.LimitScope"];
            type: components["schemas"]["Billing.LimitType"];
        };
        /**
         * Projects.AddMultiSelectPropertyRequest
         * @description Add property request
         */
        "Projects.AddMultiSelectPropertyRequest": {
            /** @description Initial configuration for multi-select property.
             *     Allows to provide initial select options and how many of them
             *     is allowed to be selected in each field (with 'max_selected').
             *      */
            config: {
                default_option?: components["schemas"]["Projects.SelectDefaultOption"];
                max_selected?: components["schemas"]["Projects.SelectMaxSelectedWithDefault"];
                options?: {
                    color?: components["schemas"]["Projects.SelectOptionColor"];
                    value: string;
                }[];
            };
            default_view_id?: components["schemas"]["Common.UUID"];
            description: string | null;
            /** @deprecated */
            input_ids?: components["schemas"]["Common.UUID"][] | null;
            inputs?: components["schemas"]["Projects.PropertyInput"][] | null;
            name: string;
            tool: components["schemas"]["Projects.Common.PropertyTool"];
            /** @enum {string} */
            type: "multi_select";
        };
        /**
         * Billing.PlanUpgradeResponse
         * @description Represents plan upgrade response. Contains newly attached plan and URL to follow to complete upgrade.
         */
        "Billing.PlanUpgradeResponse": {
            plan: components["schemas"]["Billing.Plan"];
            upgrade_url: components["schemas"]["Common.URL"];
        };
        /**
         * Imports.UploadUrlResponse
         * @description Upload URL response
         */
        "Imports.UploadUrlResponse": {
            upload_url: string;
        };
        /**
         * EntityFilters.Status
         * @description Filter entities based on a fields status
         */
        "EntityFilters.Status": {
            matcher: {
                /** @enum {string} */
                name: "property_any_of";
                property_id: components["schemas"]["Common.UUID"];
                values: components["schemas"]["Projects.ListEntities.FieldStatus"][];
            };
            /** @enum {string} */
            subject: "status";
        };
        /**
         * Pagination.PageSize
         * @description The page size or limit of the query. Set to the `first` or `last` parameter when using cursor-based pagination.
         * @example 50
         */
        "Pagination.PageSize": number;
        /**
         * Projects.PropertyIdOrSlug
         * @description Property ID or slug
         * @example property-name
         */
        "Projects.PropertyIdOrSlug": string;
        /**
         * Projects.UpdateCollectionPropertyConfig
         * @description Collection Property configuration.
         *     You can send any combination of the available configuration options.
         *
         */
        "Projects.UpdateCollectionPropertyConfig": {
            /**
             * @description Remove collection properties.
             *     If the property doesn't exist, it will be ignored.
             *
             * @default []
             */
            remove_properties: string[];
            /**
             * @description Add or update properties.
             *     If the value already exists, it will be updated either with new type, or new name.
             *     Values that don't already exist will be added.
             *
             * @default []
             */
            upsert_properties: {
                name: string;
                new_name?: string | null;
                /** @enum {string|null} */
                new_type?: "text" | "json" | null;
                /** @enum {string} */
                type?: "text" | "json";
            }[];
        };
        /**
         * Projects.EntityBulkRemoveResponse
         * @description Bulk delete response
         */
        "Projects.EntityBulkRemoveResponse": {
            entity_ids: components["schemas"]["Common.UUID"][];
            project_id: components["schemas"]["Common.UUID"];
        };
        /**
         * TYPED_TEXT
         * @description Update a field value request
         */
        TYPED_TEXT: {
            text: string | null;
        };
        /**
         * Projects.RecalculateEntitiesResponse
         * @description Entity recalculate response
         */
        "Projects.RecalculateEntitiesResponse": {
            affected_count: number;
        };
        /**
         * EntityFilters.Conjunction
         * @description Use to join filters together. It is possible to join simple or group filters with `and`, `or` operators
         * @enum {string}
         */
        "EntityFilters.Conjunction": "and" | "or";
        /** Projects.PropertyConfigResponse */
        "Projects.PropertyConfigResponse": (components["schemas"]["Projects.SingleSelectPropertyConfigResponse"] | components["schemas"]["Projects.MultiSelectPropertyConfigResponse"] | components["schemas"]["Projects.PDFPropertyConfigResponse"] | components["schemas"]["Projects.TablePropertyConfigResponse"]) | null;
        /**
         * Tools.Integrations.Tool
         * @description Tool integration state.
         */
        "Tools.Integrations.Tool": {
            supported_inputs: components["schemas"]["Tools.Integrations.SupportedInputs"];
            supported_outputs: components["schemas"]["Tools.Integrations.SupportedOutputs"];
            tool: components["schemas"]["Tools.Integrations.ToolName"];
        };
        /**
         * AskGo.SessionResponse
         * @description Session response
         */
        "AskGo.SessionResponse": {
            id: components["schemas"]["Common.UUID"];
            messages: components["schemas"]["AskGo.Message"][];
            project_id: string;
            user_id?: components["schemas"]["Common.UUID"];
            workspace_id?: components["schemas"]["Common.UUID"];
        };
        /**
         * Projects.SetFieldGroundTruth
         * @description Set ground truth status
         */
        "Projects.SetFieldGroundTruth": {
            ground_truth?: boolean;
        };
        /**
         * Projects.UpdatePropertyRequest
         * @description Update specified fields of a Property
         */
        "Projects.UpdatePropertyRequest": components["schemas"]["Projects.UpdateBasicPropertyRequest"] | components["schemas"]["Projects.UpdateSingleSelectPropertyRequest"] | components["schemas"]["Projects.UpdateMultiSelectPropertyRequest"] | components["schemas"]["Projects.UpdatePDFPropertyRequest"] | components["schemas"]["Projects.UpdateCollectionPropertyRequest"] | components["schemas"]["Projects.UpdateUserSelectPropertyRequest"];
        /**
         * Library.EntityResponse
         * @description An entity
         */
        "Library.EntityResponse": {
            active_view_ids?: components["schemas"]["Common.UUID"][];
            fields: {
                [key: string]: components["schemas"]["Projects.Entities.FieldResponse"] | undefined;
            };
            id: components["schemas"]["Common.UUID"];
            library_attributes: components["schemas"]["Library.LibraryAttributesResponse"];
            parent_entity_id?: components["schemas"]["Common.NullableUUID"];
            project_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Common.NullableUUID
         * Format: uuid
         * @example e23ff3f3-8f77-4e78-9e81-fdb25abfb781
         */
        "Common.NullableUUID": string | null;
        /**
         * Billing.PlanTemplate
         * @description Represents plan available for a workspace
         */
        "Billing.PlanTemplate": {
            billing_period: components["schemas"]["Billing.PlanBillingPeriod"];
            limits: components["schemas"]["Billing.UsageLimits"];
            name: components["schemas"]["Billing.PlanName"];
            provider: components["schemas"]["Billing.PlanProvider"];
            tier_order: components["schemas"]["Common.Integer"];
        };
        /**
         * WorkspaceInvitations.WorkspaceInvitationResponse
         * @description A workspace invitation
         */
        "WorkspaceInvitations.WorkspaceInvitationResponse": {
            email: string;
            expires_at: components["schemas"]["Common.DateTime"];
            id: components["schemas"]["Common.UUID"];
            invite_url: string;
            role: components["schemas"]["WorkspaceInvitations.Role"];
            /** @enum {string} */
            status: "pending" | "expired" | "accepted";
            workspace_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Billing.PlanBillingPeriod
         * @description Billing period of the plan
         * @enum {string}
         */
        "Billing.PlanBillingPeriod": "yearly" | "monthly";
        /**
         * Projects.SetFieldValueArrayRequest
         * @description Set a field value request for properties with array values
         */
        "Projects.SetFieldValueArrayRequest": {
            value: string[];
        };
        /**
         * Common.UUID
         * Format: uuid
         * @example e23ff3f3-8f77-4e78-9e81-fdb25abfb781
         */
        "Common.UUID": string;
        /**
         * update_entity
         * @description Updates the provided fields of an entity.
         */
        update_entity: {
            /**
             * fields
             * @description Fields to update, note that the field key is the property id or property slug for that field.
             */
            fields: {
                [key: string]: components["schemas"]["field_value"] | undefined;
            };
        };
        /**
         * Automations.EventsResponse
         * @description Events that will trigger the automation
         */
        "Automations.EventsResponse": {
            /** @description Filters to apply before triggering the automation for this event */
            "entity.all_fields_completed"?: Record<string, never>;
            /** @description Filters to apply before triggering the automation for this event */
            "entity.created"?: Record<string, never>;
            /** @description Filters to apply before triggering the automation for this event */
            "entity.field_completed"?: {
                property_id?: string;
                select_option_value?: string;
            };
            /** @description Filters to apply before triggering the automation for this event */
            "project.created"?: Record<string, never>;
        };
        /**
         * Automations.TriggerResponse
         * @description A trigger
         */
        "Automations.TriggerResponse": {
            action: components["schemas"]["Automations.Action"];
            events: components["schemas"]["Automations.EventsResponse"];
            id: components["schemas"]["Common.UUID"];
            project_id: components["schemas"]["Common.NullableUUID"];
            workspace_id: components["schemas"]["Common.UUID"];
        };
        /**
         * Workspaces.WorkspaceRole
         * @description The role of the user in the workspace. Only available when listing all workspaces.
         * @enum {string|null}
         */
        "Workspaces.WorkspaceRole": "owner" | "admin" | "editor" | "worker" | "reader" | null;
        /**
         * Projects.ListEntities.FieldStatus
         * @enum {string}
         */
        "Projects.ListEntities.FieldStatus": "idle" | "uploading" | "waiting" | "computing" | "complete" | "error";
        /**
         * Pagination.Offset
         * @description The offset to use when paginating records
         * @example 50
         */
        "Pagination.Offset": number | null;
        /**
         * WorkspaceInvitations.InviteUser
         * @description Object describing a user to invite to a workspace
         */
        "WorkspaceInvitations.InviteUser": {
            email: components["schemas"]["Common.Email"];
            role: components["schemas"]["WorkspaceInvitations.Role"];
        };
        /** Library.UpsertEntityAttributesRequest */
        "Library.UpsertEntityAttributesRequest": {
            /**
             * @description The name of the entity
             * @example My Entity
             */
            name: string | null;
        };
        /**
         * Projects.SelectDefaultOption
         * @description Default select option.
         *     If the value doesn't exist, it will be ignored.
         *
         */
        "Projects.SelectDefaultOption": string | null;
        /**
         * fields
         * @description Fields to prefill with values, note that the field key is the property id or property slug for that field.
         *             Fields not mentioned are going to be set to an empty value.
         */
        fields: {
            [key: string]: components["schemas"]["field_value"] | undefined;
        };
        /**
         * Projects.AddTablePropertyRequest
         * @description Add property request
         */
        "Projects.AddTablePropertyRequest": {
            default_view_id?: components["schemas"]["Common.UUID"];
            description: string | null;
            /** @deprecated */
            input_ids?: components["schemas"]["Common.UUID"][] | null;
            inputs?: components["schemas"]["Projects.PropertyInput"][] | null;
            name: string;
            tool: components["schemas"]["Projects.Common.PropertyTool"];
            /** @enum {string} */
            type: "collection";
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "entity-id-list": {
        parameters: {
            query?: {
                parent_entity_id?: components["schemas"]["Common.UUID"];
                active_view_id?: components["schemas"]["Common.UUID"];
                /** @description List of field names to order by */
                order_by?: components["schemas"]["Projects.ListEntities.ListEntitiesOrderBy"];
                /** @description List of order directions for the fields in `order_by` */
                order_directions?: components["schemas"]["Pagination.OrderDirections"];
                /** @description The maximum number of records to return when using `offset` pagination */
                limit?: components["schemas"]["Pagination.Limit"];
                /** @description The offset to use when paginating records */
                offset?: components["schemas"]["Pagination.Offset"];
                /** @description The number of records to return after the provided cursor; used in combination with `after` */
                first?: components["schemas"]["Pagination.First"];
                /** @description The number of records to return for before the provided cursor; used in combination with `before` */
                last?: components["schemas"]["Pagination.Last"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                after?: components["schemas"]["Pagination.Cursor"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                before?: components["schemas"]["Pagination.Cursor"];
            };
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Projects.ListEntities.ListEntityIdsResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ListEntities.ListEntityIdsResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "trigger-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                trigger_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Automations.TriggerResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Automations.TriggerResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "trigger-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                trigger_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Common.DeleteResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.DeleteResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "tools-toggle-integration": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Tools.Integrations.ToggleIntegrationStateRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tools.Integrations.ToggleIntegrationStateRequest"];
            };
        };
        responses: {
            /** @description Tools.Integrations.ToolIntegrationsResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tools.Integrations.ToolIntegrationsResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "filtered-entity-list": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Projects.ListEntitiesRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects.ListEntitiesRequest"];
            };
        };
        responses: {
            /** @description Projects.ListEntities.ListEntitiesResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ListEntities.ListEntitiesResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "entity-start-file-upload": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                entity_id: components["schemas"]["Common.UUID"];
                /** @description Property ID or slug */
                property_id_or_slug: components["schemas"]["Projects.PropertyIdOrSlug"];
            };
            cookie?: never;
        };
        /** @description Projects.StartFileUploadRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects.StartFileUploadRequest"];
            };
        };
        responses: {
            /** @description Projects.StartFileUploadResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.StartFileUploadResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-list-views": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Projects.ListViewsResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ListViewsResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-add-view": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Projects.CreateViewRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects.CreateViewRequest"];
            };
        };
        responses: {
            /** @description Projects.ViewResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ViewResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "tools-list-integrations": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tools.Integrations.ToolIntegrationsResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tools.Integrations.ToolIntegrationsResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "entity-set-value": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                entity_id: components["schemas"]["Common.UUID"];
                /** @description Property ID or slug */
                property_id_or_slug: components["schemas"]["Projects.PropertyIdOrSlug"];
            };
            cookie?: never;
        };
        /** @description Projects.SetFieldValueRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects.SetFieldValueRequest"];
            };
        };
        responses: {
            /** @description Projects.Entities.FieldResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.Entities.FieldResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "billing-plan-list": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Billing.ListPlansResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Billing.ListPlansResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "billing-plan-upgrade": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Billing.PlanUpgradeRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Billing.PlanUpgradeRequest"];
            };
        };
        responses: {
            /** @description Billing.PlanUpgradeResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Billing.PlanUpgradeResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "entity-confirm-file-upload": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                entity_id: components["schemas"]["Common.UUID"];
                /** @description Property ID or slug */
                property_id_or_slug: components["schemas"]["Projects.PropertyIdOrSlug"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Projects.Entities.FieldResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.Entities.FieldResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-list-properties": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Projects.ListPropertiesResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ListPropertiesResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-add-property": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Projects.AddPropertyRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects.AddPropertyRequest"];
            };
        };
        responses: {
            /** @description Projects.PropertyResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.PropertyResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-get-view": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                view_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Projects.ViewResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ViewResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-update-view": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                view_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Projects.UpdateViewRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects.UpdateViewRequest"];
            };
        };
        responses: {
            /** @description Projects.ViewResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ViewResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-delete-view": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                view_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Common.DeleteResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.DeleteResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "api-key-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                api_key_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ApiKeys.ApiKeyResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeys.ApiKeyResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "api-key-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                api_key_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Common.DeleteResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.DeleteResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "library-entity-list": {
        parameters: {
            query?: {
                parent_entity_id?: components["schemas"]["Common.UUID"];
                /** @deprecated */
                active_view_ids?: components["schemas"]["Common.UUIDList"];
                active_view_id?: components["schemas"]["Common.UUID"];
                /** @description List of field names to order by */
                order_by?: components["schemas"]["Library.ListEntitiesOrderBy"];
                /** @description List of order directions for the fields in `order_by` */
                order_directions?: components["schemas"]["Pagination.OrderDirections"];
                /** @description The maximum number of records to return when using `offset` pagination */
                limit?: components["schemas"]["Pagination.Limit"];
                /** @description The offset to use when paginating records */
                offset?: components["schemas"]["Pagination.Offset"];
                /** @description The number of records to return after the provided cursor; used in combination with `after` */
                first?: components["schemas"]["Pagination.First"];
                /** @description The number of records to return for before the provided cursor; used in combination with `before` */
                last?: components["schemas"]["Pagination.Last"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                after?: components["schemas"]["Pagination.Cursor"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                before?: components["schemas"]["Pagination.Cursor"];
            };
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Library.ListEntitiesResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Library.ListEntitiesResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "workspace-update-icon": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Workspaces.UpdateWorkspaceIconRequest */
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Workspaces.UpdateWorkspaceIconRequest"];
            };
        };
        responses: {
            /** @description Workspaces.WorkspaceResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspaces.WorkspaceResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "workspace-remove-icon": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Common.DeleteResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.DeleteResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "api-keys-list": {
        parameters: {
            query?: {
                /** @description List of field names to order by */
                order_by?: components["schemas"]["ApiKeys.ListApiKeysOrderBy"];
                /** @description List of order directions for the fields in `order_by` */
                order_directions?: components["schemas"]["Pagination.OrderDirections"];
                /** @description The maximum number of records to return when using `offset` pagination */
                limit?: components["schemas"]["Pagination.Limit"];
                /** @description The offset to use when paginating records */
                offset?: components["schemas"]["Pagination.Offset"];
                /** @description The number of records to return after the provided cursor; used in combination with `after` */
                first?: components["schemas"]["Pagination.First"];
                /** @description The number of records to return for before the provided cursor; used in combination with `before` */
                last?: components["schemas"]["Pagination.Last"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                after?: components["schemas"]["Pagination.Cursor"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                before?: components["schemas"]["Pagination.Cursor"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ApiKeys.ListApiKeysResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeys.ListApiKeysResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "api-key-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ApiKeys.CreateApiKeyRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApiKeys.CreateApiKeyRequest"];
            };
        };
        responses: {
            /** @description ApiKeys.ApiKeyResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeys.ApiKeyResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "export-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                export_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Exports.ExportResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Exports.ExportResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "export-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                export_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Common.DeleteResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.DeleteResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "get-previous-entity": {
        parameters: {
            query?: {
                /** @deprecated */
                active_view_ids?: components["schemas"]["Common.UUIDList"];
                active_view_id?: components["schemas"]["Common.UUID"];
                /** @description List of field names to order by */
                order_by?: components["schemas"]["Projects.ListEntities.ListEntitiesOrderBy"];
                /** @description List of order directions for the fields in `order_by` */
                order_directions?: components["schemas"]["Pagination.OrderDirections"];
                /** @description The maximum number of records to return when using `offset` pagination */
                limit?: components["schemas"]["Pagination.Limit"];
                /** @description The offset to use when paginating records */
                offset?: components["schemas"]["Pagination.Offset"];
                /** @description The number of records to return after the provided cursor; used in combination with `after` */
                first?: components["schemas"]["Pagination.First"];
                /** @description The number of records to return for before the provided cursor; used in combination with `before` */
                last?: components["schemas"]["Pagination.Last"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                after?: components["schemas"]["Pagination.Cursor"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                before?: components["schemas"]["Pagination.Cursor"];
            };
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                entity_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Projects.ListEntities.ListEntitiesResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ListEntities.ListEntitiesResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-get-property": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                /** @description Property ID or slug */
                property_id_or_slug: components["schemas"]["Projects.PropertyIdOrSlug"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Projects.PropertyResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.PropertyResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-update-property": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                /** @description Property ID or slug */
                property_id_or_slug: components["schemas"]["Projects.PropertyIdOrSlug"];
            };
            cookie?: never;
        };
        /** @description Projects.UpdatePropertyRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects.UpdatePropertyRequest"];
            };
        };
        responses: {
            /** @description Projects.PropertyResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.PropertyResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-remove-property": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                /** @description Property ID or slug */
                property_id_or_slug: components["schemas"]["Projects.PropertyIdOrSlug"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Common.DeleteResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.DeleteResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "ask-go-start-file-upload": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                session_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Projects.StartFileUploadRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects.StartFileUploadRequest"];
            };
        };
        responses: {
            /** @description Projects.StartFileUploadResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.StartFileUploadResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "user-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users.UserResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Users.UserResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "workspace-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Workspaces.ListWorkspacesResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspaces.ListWorkspacesResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "workspace-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Workspaces.CreateWorkspaceRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Workspaces.CreateWorkspaceRequest"];
            };
        };
        responses: {
            /** @description Workspaces.WorkspaceResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspaces.WorkspaceResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "ask-go-ask": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                session_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description AskGo.AskRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["AskGo.AskRequest"];
            };
        };
        responses: {
            /** @description AskGo.SessionResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AskGo.SessionResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "ask-go-list-sessions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description AskGo.ListSessionsResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AskGo.ListSessionsResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "ask-go-create-session": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description AskGo.CreateSessionRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["AskGo.CreateSessionRequest"];
            };
        };
        responses: {
            /** @description AskGo.SessionResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AskGo.SessionResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "get-next-entity": {
        parameters: {
            query?: {
                /** @deprecated */
                active_view_ids?: components["schemas"]["Common.UUIDList"];
                active_view_id?: components["schemas"]["Common.UUID"];
                /** @description List of field names to order by */
                order_by?: components["schemas"]["Projects.ListEntities.ListEntitiesOrderBy"];
                /** @description List of order directions for the fields in `order_by` */
                order_directions?: components["schemas"]["Pagination.OrderDirections"];
                /** @description The maximum number of records to return when using `offset` pagination */
                limit?: components["schemas"]["Pagination.Limit"];
                /** @description The offset to use when paginating records */
                offset?: components["schemas"]["Pagination.Offset"];
                /** @description The number of records to return after the provided cursor; used in combination with `after` */
                first?: components["schemas"]["Pagination.First"];
                /** @description The number of records to return for before the provided cursor; used in combination with `before` */
                last?: components["schemas"]["Pagination.Last"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                after?: components["schemas"]["Pagination.Cursor"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                before?: components["schemas"]["Pagination.Cursor"];
            };
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                entity_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Projects.ListEntities.ListEntitiesResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ListEntities.ListEntitiesResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "import-start": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                import_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Imports.ImportResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Imports.ImportResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "workspace-invitation-list": {
        parameters: {
            query?: {
                /** @description List of field names to order by */
                order_by?: components["schemas"]["WorkspaceInvitations.OrderBy"];
                /** @description List of order directions for the fields in `order_by` */
                order_directions?: components["schemas"]["Pagination.OrderDirections"];
                /** @description The maximum number of records to return when using `offset` pagination */
                limit?: components["schemas"]["Pagination.Limit"];
                /** @description The offset to use when paginating records */
                offset?: components["schemas"]["Pagination.Offset"];
                /** @description The number of records to return after the provided cursor; used in combination with `after` */
                first?: components["schemas"]["Pagination.First"];
                /** @description The number of records to return for before the provided cursor; used in combination with `before` */
                last?: components["schemas"]["Pagination.Last"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                after?: components["schemas"]["Pagination.Cursor"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                before?: components["schemas"]["Pagination.Cursor"];
            };
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description WorkspaceInvitations.ListInvitationsResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceInvitations.ListInvitationsResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "workspace-invitation-create": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description WorkspaceInvitations.CreateInvitationRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkspaceInvitations.CreateInvitationRequest"];
            };
        };
        responses: {
            /** @description WorkspaceInvitations.CreateInvitationResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceInvitations.CreateInvitationResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-update-cover-image": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Projects.UpdateProjectCoverImageRequest */
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Projects.UpdateProjectCoverImageRequest"];
            };
        };
        responses: {
            /** @description Projects.ProjectResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ProjectResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-remove-cover-image": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Common.DeleteResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.DeleteResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "user-get-me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users.UserMeResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Users.UserMeResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "user-update-me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Users.UserMeUpdateRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Users.UserMeUpdateRequest"];
            };
        };
        responses: {
            /** @description Users.UserMeResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Users.UserMeResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "import-list-project": {
        parameters: {
            query?: {
                /** @description List of field names to order by.
                 *     By default the list is ordered by `created_at` in descending order.
                 *      */
                order_by?: components["schemas"]["Imports.ListImportsOrderBy"];
                /** @description List of order directions for the fields in `order_by` */
                order_directions?: components["schemas"]["Pagination.OrderDirections"];
                /** @description The maximum number of records to return when using `offset` pagination */
                limit?: components["schemas"]["Pagination.Limit"];
                /** @description The offset to use when paginating records */
                offset?: components["schemas"]["Pagination.Offset"];
                /** @description The number of records to return after the provided cursor; used in combination with `after` */
                first?: components["schemas"]["Pagination.First"];
                /** @description The number of records to return for before the provided cursor; used in combination with `before` */
                last?: components["schemas"]["Pagination.Last"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                after?: components["schemas"]["Pagination.Cursor"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                before?: components["schemas"]["Pagination.Cursor"];
            };
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Imports.ListImportsResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Imports.ListImportsResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "ask-go-create-project-from-prompt": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description AskGo.CreateProjectFromPromptRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["AskGo.CreateProjectFromPromptRequest"];
            };
        };
        responses: {
            /** @description AskGo.CreateProjectFromPromptResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AskGo.CreateProjectFromPromptResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "import-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                import_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Imports.ImportResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Imports.ImportResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "entity-bulk-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description bulk_delete_entities */
        requestBody: {
            content: {
                "application/json": components["schemas"]["bulk_delete_entities"];
            };
        };
        responses: {
            /** @description Projects.EntityBulkRemoveResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.EntityBulkRemoveResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "entity-recalculate-all": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Projects.RecalculateEntitiesRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects.RecalculateEntitiesRequest"];
            };
        };
        responses: {
            /** @description Projects.RecalculateEntitiesResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.RecalculateEntitiesResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "workspace-invitation-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                invitation_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Common.DeleteResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.DeleteResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "workspace-invitation-accept": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description WorkspaceInvitations.AcceptInvitationRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkspaceInvitations.AcceptInvitationRequest"];
            };
        };
        responses: {
            /** @description WorkspaceInvitations.WorkspaceInvitationResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceInvitations.WorkspaceInvitationResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "trigger-list": {
        parameters: {
            query?: {
                /** @description List of field names to order by */
                order_by?: components["schemas"]["Automations.ListAutomationsOrderBy"];
                /** @description List of order directions for the fields in `order_by` */
                order_directions?: components["schemas"]["Pagination.OrderDirections"];
                /** @description The maximum number of records to return when using `offset` pagination */
                limit?: components["schemas"]["Pagination.Limit"];
                /** @description The offset to use when paginating records */
                offset?: components["schemas"]["Pagination.Offset"];
                /** @description The number of records to return after the provided cursor; used in combination with `after` */
                first?: components["schemas"]["Pagination.First"];
                /** @description The number of records to return for before the provided cursor; used in combination with `before` */
                last?: components["schemas"]["Pagination.Last"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                after?: components["schemas"]["Pagination.Cursor"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                before?: components["schemas"]["Pagination.Cursor"];
            };
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Automations.ListTriggersResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Automations.ListTriggersResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "trigger-create": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Automations.CreateTriggerRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Automations.CreateTriggerRequest"];
            };
        };
        responses: {
            /** @description Automations.TriggerResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Automations.TriggerResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "workspace-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Workspaces.WorkspaceResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspaces.WorkspaceResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "workspace-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Workspaces.UpdateWorkspaceRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Workspaces.UpdateWorkspaceRequest"];
            };
        };
        responses: {
            /** @description Workspaces.WorkspaceResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspaces.WorkspaceResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "workspace-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Common.DeleteResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.DeleteResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "entity-recalculate-single": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                entity_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Projects.RecalculateEntitiesRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects.RecalculateEntitiesRequest"];
            };
        };
        responses: {
            /** @description Projects.RecalculateEntitiesResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.RecalculateEntitiesResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "library-update-entity-attributes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                entity_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Library.UpsertEntityAttributesRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Library.UpsertEntityAttributesRequest"];
            };
        };
        responses: {
            /** @description Library.EntityResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Library.EntityResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "workspace-member-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                user_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users.ResourceMemberResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Users.ResourceMemberResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "user-workspace-member-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                user_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Users.UpdateMemberRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Users.UpdateMemberRequest"];
            };
        };
        responses: {
            /** @description Users.ResourceMemberResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Users.ResourceMemberResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "user-workspace-member-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                user_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users.ResourceMemberResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Users.ResourceMemberResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-list": {
        parameters: {
            query?: {
                /** @description Only return parent projects */
                only_parents?: components["schemas"]["Projects.OnlyParentProjects"];
                /** @description List of field names to order by */
                order_by?: components["schemas"]["Projects.ListProjectsOrderBy"];
                /** @description List of order directions for the fields in `order_by` */
                order_directions?: components["schemas"]["Pagination.OrderDirections"];
                /** @description The maximum number of records to return when using `offset` pagination */
                limit?: components["schemas"]["Pagination.Limit"];
                /** @description The offset to use when paginating records */
                offset?: components["schemas"]["Pagination.Offset"];
                /** @description The number of records to return after the provided cursor; used in combination with `after` */
                first?: components["schemas"]["Pagination.First"];
                /** @description The number of records to return for before the provided cursor; used in combination with `before` */
                last?: components["schemas"]["Pagination.Last"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                after?: components["schemas"]["Pagination.Cursor"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                before?: components["schemas"]["Pagination.Cursor"];
            };
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Projects.ListProjectsResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ListProjectsResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-create": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Projects.CreateProjectRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects.CreateProjectRequest"];
            };
        };
        responses: {
            /** @description Projects.ProjectResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ProjectResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "tools-list-keys": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tools.KeyManager.ListToolKeysResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tools.KeyManager.ListToolKeysResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "tools-upsert-key": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Tools.KeyManager.UpsertToolKeyRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tools.KeyManager.UpsertToolKeyRequest"];
            };
        };
        responses: {
            /** @description Tools.KeyManager.ToolKeyResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tools.KeyManager.ToolKeyResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-clone": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Projects.CloneProjectRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects.CloneProjectRequest"];
            };
        };
        responses: {
            /** @description Projects.ProjectResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ProjectResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "import-sign-upload": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                import_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Imports.UploadUrlResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Imports.UploadUrlResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "filtered-entity-id-list": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Projects.ListEntitiesRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects.ListEntitiesRequest"];
            };
        };
        responses: {
            /** @description Projects.ListEntities.ListEntityIdsResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ListEntities.ListEntityIdsResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "ask-go-get-session": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                session_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description AskGo.SessionResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AskGo.SessionResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "library-get-workspace": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Library.ProjectResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Library.ProjectResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "user-workspace-members-list": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users.ListResourceMembersResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Users.ListResourceMembersResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "entity-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                entity_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Projects.Entities.EntityResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.Entities.EntityResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "entity-update-values": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                entity_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description update_entity */
        requestBody: {
            content: {
                "application/json": components["schemas"]["update_entity"];
            };
        };
        responses: {
            /** @description Projects.Entities.FieldResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.Entities.FieldResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "entity-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                entity_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Common.DeleteResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.DeleteResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Projects.ProjectResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ProjectResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Projects.UpdateProjectRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects.UpdateProjectRequest"];
            };
        };
        responses: {
            /** @description Projects.ProjectResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ProjectResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Common.DeleteResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.DeleteResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "entity-set-ground-truth": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
                entity_id: components["schemas"]["Common.UUID"];
                /** @description Property ID or slug */
                property_id_or_slug: components["schemas"]["Projects.PropertyIdOrSlug"];
            };
            cookie?: never;
        };
        /** @description Projects.SetFieldGroundTruth */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects.SetFieldGroundTruth"];
            };
        };
        responses: {
            /** @description Projects.Entities.FieldResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.Entities.FieldResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "entity-list": {
        parameters: {
            query?: {
                parent_entity_id?: components["schemas"]["Common.UUID"];
                /** @deprecated */
                active_view_ids?: components["schemas"]["Common.UUIDList"];
                active_view_id?: components["schemas"]["Common.UUID"];
                /** @description List of field names to order by */
                order_by?: components["schemas"]["Projects.ListEntities.ListEntitiesOrderBy"];
                /** @description List of order directions for the fields in `order_by` */
                order_directions?: components["schemas"]["Pagination.OrderDirections"];
                /** @description The maximum number of records to return when using `offset` pagination */
                limit?: components["schemas"]["Pagination.Limit"];
                /** @description The offset to use when paginating records */
                offset?: components["schemas"]["Pagination.Offset"];
                /** @description The number of records to return after the provided cursor; used in combination with `after` */
                first?: components["schemas"]["Pagination.First"];
                /** @description The number of records to return for before the provided cursor; used in combination with `before` */
                last?: components["schemas"]["Pagination.Last"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                after?: components["schemas"]["Pagination.Cursor"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                before?: components["schemas"]["Pagination.Cursor"];
            };
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Projects.ListEntities.ListEntitiesResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ListEntities.ListEntitiesResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "entity-create": {
        parameters: {
            query?: {
                /** @description List of property ids and/or slugs, the endpoint will wait for these properties to be calculated before returning.
                 *                 Note that after 45 seconds the endpoint will timeout and just return the entity. */
                wait_for?: components["schemas"]["Projects.PropertyIdOrSlugList"];
            };
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Projects.CreateEntityRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Projects.CreateEntityRequest"];
            };
        };
        responses: {
            /** @description Projects.Entities.EntityResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.Entities.EntityResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "import-list-workspace": {
        parameters: {
            query?: {
                /** @description List of field names to order by.
                 *     By default the list is ordered by `created_at` in descending order.
                 *      */
                order_by?: components["schemas"]["Imports.ListImportsOrderBy"];
                /** @description List of order directions for the fields in `order_by` */
                order_directions?: components["schemas"]["Pagination.OrderDirections"];
                /** @description The maximum number of records to return when using `offset` pagination */
                limit?: components["schemas"]["Pagination.Limit"];
                /** @description The offset to use when paginating records */
                offset?: components["schemas"]["Pagination.Offset"];
                /** @description The number of records to return after the provided cursor; used in combination with `after` */
                first?: components["schemas"]["Pagination.First"];
                /** @description The number of records to return for before the provided cursor; used in combination with `before` */
                last?: components["schemas"]["Pagination.Last"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                after?: components["schemas"]["Pagination.Cursor"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                before?: components["schemas"]["Pagination.Cursor"];
            };
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Imports.ListImportsResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Imports.ListImportsResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "import-prepare": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Imports.PrepareImportRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Imports.PrepareImportRequest"];
            };
        };
        responses: {
            /** @description Imports.ImportResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Imports.ImportResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "export-list": {
        parameters: {
            query?: {
                /** @description List of field names to order by */
                order_by?: components["schemas"]["Exports.ListExportsOrderBy"];
                /** @description List of order directions for the fields in `order_by` */
                order_directions?: components["schemas"]["Pagination.OrderDirections"];
                /** @description The maximum number of records to return when using `offset` pagination */
                limit?: components["schemas"]["Pagination.Limit"];
                /** @description The offset to use when paginating records */
                offset?: components["schemas"]["Pagination.Offset"];
                /** @description The number of records to return after the provided cursor; used in combination with `after` */
                first?: components["schemas"]["Pagination.First"];
                /** @description The number of records to return for before the provided cursor; used in combination with `before` */
                last?: components["schemas"]["Pagination.Last"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                after?: components["schemas"]["Pagination.Cursor"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                before?: components["schemas"]["Pagination.Cursor"];
            };
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Exports.ListExportsResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Exports.ListExportsResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "export-create": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                project_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        /** @description Exports.CreateExportRequest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Exports.CreateExportRequest"];
            };
        };
        responses: {
            /** @description Exports.ExportResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Exports.ExportResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "tools-delete-key": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: components["schemas"]["Common.UUID"];
                tool_key_id: components["schemas"]["Common.UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tools.KeyManager.ToolKeyResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tools.KeyManager.ToolKeyResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
    "project-template-list": {
        parameters: {
            query?: {
                /** @description List of field names to order by */
                order_by?: components["schemas"]["Projects.ListProjectsOrderBy"];
                /** @description List of order directions for the fields in `order_by` */
                order_directions?: components["schemas"]["Pagination.OrderDirections"];
                /** @description The maximum number of records to return when using `offset` pagination */
                limit?: components["schemas"]["Pagination.Limit"];
                /** @description The offset to use when paginating records */
                offset?: components["schemas"]["Pagination.Offset"];
                /** @description The number of records to return after the provided cursor; used in combination with `after` */
                first?: components["schemas"]["Pagination.First"];
                /** @description The number of records to return for before the provided cursor; used in combination with `before` */
                last?: components["schemas"]["Pagination.Last"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                after?: components["schemas"]["Pagination.Cursor"];
                /** @description A base64 encoded value representing a cursor, or an element ID if applicable */
                before?: components["schemas"]["Pagination.Cursor"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Projects.ListProjectsResponse */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects.ListProjectsResponse"];
                };
            };
            /** @description Common.APIError */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
            /** @description Common.APIError */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Common.APIError"];
                };
            };
        };
    };
}
